<?php

/*********************************************
*
* Module de paiement
* Crédit Mutuel
* Abtel
* 
*********************************************/

require_once( dirname(dirname(__FILE__)).'/TypePaiement.interface.php' );

class ReservationsTypePaiementPayBox extends Plugin implements ReservationsTypePaiementPlugin {
    private static $ABONNEMENT = false;
    private static $AUTOSEULE = false;
    public static function setMultiPayment($set){
        ReservationsTypePaiementPayBox::$ABONNEMENT = $set;
        ReservationsTypePaiementPayBox::$AUTOSEULE = $set;
    }
	/**
	* initStatePaiement
	* Initiliase le paiement avec ses propriétés particulières
	*/
	public function initStatePaiement() {
		return 0;
	}


	public function __construct() {
		if (!defined("PAYBOX_LIB_DIR"))define("PAYBOX_LIB_DIR", dirname(__FILE__));
	}

	/**
	 * getCodeHTML
	 * return the html code generated by the payment module.
	 * $paiement = Reservations/Paiement Objectclass
	 **/
	public function getCodeHTML( $paiement ) {
	    if ($paiement->PaiementFractionne){
            ReservationsTypePaiementPayBox::setMultiPayment(true);
        }
        //CONFIGURATION
        $AUTOSEULE = ReservationsTypePaiementPayBox::$AUTOSEULE;
        $ABONNEMENT = ReservationsTypePaiementPayBox::$ABONNEMENT;

	    $facture = $paiement->getOneParent('Facture');
	    $client = $facture->getOneParent('Client');
		// Params
		//mode d'appel
		     //$PBX_MODE        = '4';    //pour lancement paiement par exécution
		     //$PBX_MODE        = '1';    //pour lancement paiement par URL
		//identification
		     $PBX_SITE        = $this->Params['IDSITE'];
		     $PBX_RANG        = $this->Params['RANG'];
		     $PBX_IDENTIFIANT = $this->Params['IDENTIFIANT'];
		//gestion de la page de connection : paramétrage "invisible"
		     $PBX_WAIT        = '0';
		     $PBX_TXT         = " ";
		     $PBX_BOUTPI      = "nul";
		     $PBX_BKGD        = "white";
		     $PBX_HASH        = "SHA512";
		//informations paiement (appel)
		     $PBX_TOTAL       = round($paiement->Montant * 100);
		     $PBX_DEVISE      = '978';
		     $PBX_CMD         = sprintf("%06d", $paiement->Id);
		     //EMAIL CLIENT
		     $PBX_PORTEUR     = $paiement->Mail;
             $PBX_TYPEPAIEMENT= 'CARTE';
             $PBX_TYPECARTE   = 'CB';
             $PBX_AUTOSEULE   = 'O';
             $PBX_REFABONNE   = sprintf("CLI%06d", $client->Id);
		//informations nécessaires aux traitements (réponse)
            if ($AUTOSEULE)
                $PBX_RETOUR      = "Mt:M;Ref:R;Auto:A;Erreur:E;carte:U;sign:K";
            else
                $PBX_RETOUR      = "Mt:M;Ref:R;Auto:A;Erreur:E;sign:K";
		     $PBX_EFFECTUE    = "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Reservations/Facture/'.$facture->NumFac.'/Confirmation');
		     $PBX_REFUSE      = "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Reservations/Facture/'.$facture->NumFac.'/Annulation');
		     $PBX_ANNULE      = "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Reservations/Facture/'.$facture->NumFac.'/Annulation');
		     $PBX_REPONDRE_A  = "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Reservations/Facture/'.$facture->NumFac.'/IPN');
		//page en cas d'erreur
		     $PBX_ERREUR      = "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Reservations/Facture/'.$facture->NumFac.'/Annulation');
		//date
		     $PBX_TIME	      =  date("c");
		//paiement différé
             $PBX_DIFF        = "90";
             $PBX_CURRENCYDISPLAY = "EUR";

        //ABONNEMENT
//        $ABO = "PBX_AUTOSEULE=$PBX_AUTOSEULE&PBX_REFABONNE=$PBX_REFABONNE&";
        $ABO = '';
        if ($AUTOSEULE)
            $ABO .= "PBX_AUTOSEULE=$PBX_AUTOSEULE&";
        if ($ABONNEMENT)
            $ABO .= "PBX_REFABONNE=$PBX_REFABONNE&";

		//construction de la chaîne de paramètres
        $PBX= "PBX_SITE=$PBX_SITE&PBX_RANG=$PBX_RANG&PBX_IDENTIFIANT=$PBX_IDENTIFIANT&PBX_TOTAL=$PBX_TOTAL&PBX_DEVISE=$PBX_DEVISE&PBX_CMD=$PBX_CMD&".$ABO."PBX_PORTEUR=$PBX_PORTEUR&PBX_RETOUR=$PBX_RETOUR&PBX_HASH=$PBX_HASH&PBX_TIME=$PBX_TIME";
        //$PBX= $ABO."PBX_SITE=$PBX_SITE&PBX_RANG=$PBX_RANG&PBX_IDENTIFIANT=$PBX_IDENTIFIANT&PBX_TOTAL=$PBX_TOTAL&PBX_DEVISE=$PBX_DEVISE&PBX_PORTEUR=$PBX_PORTEUR&PBX_RETOUR=$PBX_RETOUR&PBX_HASH=$PBX_HASH&PBX_TIME=$PBX_TIME";

		// Si la clé est en ASCII, On la transforme en binaire
		$binKey = pack("H*", $this->Params['KEY']);
	
		//on génère la clef HMAC
		$hmac = strtoupper(hash_hmac('sha512', $PBX, $binKey));
		
		//on renvoie le formulaire
		return '
		<form method="POST" id="payment-'.$PBX_CMD.'" action="https://preprod-tpeweb.e-transactions.fr/cgi/MYchoix_pagepaiement.cgi">
			<input type="hidden" name="PBX_SITE" value="'.$PBX_SITE.'">
			<input type="hidden" name="PBX_RANG" value="'.$PBX_RANG.'">
			<input type="hidden" name="PBX_IDENTIFIANT" value="'.$PBX_IDENTIFIANT.'">
			<input type="hidden" name="PBX_TOTAL" value="'.$PBX_TOTAL.'">
			<input type="hidden" name="PBX_DEVISE" value="'.$PBX_DEVISE.'">
			<input type="hidden" name="PBX_CMD" value="'.$PBX_CMD.'">
			<!-- ABONNEMENT -->
			'.($AUTOSEULE?'<input type="hidden" name="PBX_AUTOSEULE" value="'.$PBX_AUTOSEULE.'">':'').'
			'.($ABONNEMENT?'<input type="hidden" name="PBX_REFABONNE" value="'.$PBX_REFABONNE.'">':'').'
			<!-- FIN ABONNEMENT -->
			<input type="hidden" name="PBX_PORTEUR" value="'.$PBX_PORTEUR.'">
			<input type="hidden" name="PBX_RETOUR" value="'.$PBX_RETOUR.'">
			<input type="hidden" name="PBX_HASH" value="'.$PBX_HASH.'">
			<input type="hidden" name="PBX_TIME" value="'.$PBX_TIME.'">
			<input type="hidden" name="PBX_HMAC" value="'.$hmac.'">
			<input type="submit" value="Envoyer">
		</form>
		<script>
            (function () {
                $("#payment-'.$PBX_CMD.'").submit();
            })();		
        </script>
		';
	}

	public function serveurAutoResponse( $paiement, $commande ) {
        $PUBKEY='-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDe+hkicNP7ROHUssGNtHwiT2Ew
HFrSk/qwrcq8v5metRtTTFPE/nmzSkRnTs3GMpi57rBdxBBJW5W9cpNyGUh0jNXc
VrOSClpD5Ri2hER/GcNrxVRP7RlWOqB1C03q4QYmwjHZ+zlM4OUhCCAtSWflB4wC
Ka1g88CjFwRw/PB9kwIDAQAB
-----END PUBLIC KEY-----';
        $client = $commande->getOneParent('Client');

		// Retourne le code d'état du paiement
        Klog::l('params','Mt='.$_GET['Mt'].'&Ref='.$_GET['Ref'].'&Auto='.$_GET['Auto'].'&Erreur='.$_GET['Erreur'].'&carte='.$_GET['carte']);
        Klog::l('sign',$_GET['sign']);
        //si la variable carte alors enregistrement carte
        if (isset($_GET["carte"]))
            $str = 'Mt='.$_GET['Mt'].'&Ref='.$_GET['Ref'].'&Auto='.$_GET['Auto'].'&Erreur='.$_GET['Erreur'].'&carte='.urlencode($_GET['carte']);
        else
            $str = 'Mt='.$_GET['Mt'].'&Ref='.$_GET['Ref'].'&Auto='.$_GET['Auto'].'&Erreur='.$_GET['Erreur'];

        if (openssl_verify ( $str, base64_decode($_GET['sign']) , $PUBKEY )){
            $etat = ($_GET['Erreur'] == '00000') ? 1 : 2;
            Klog::l('autoresponse OK');
            //si carte alors enregistrement identifiant carte dnas le client
            if (isset($_GET["carte"])){
                Klog::l('carte abonne',$_GET['carte']);
                $client->IdentifiantCB = $_GET['carte'];
                $client->Save();
                $etat = ($_GET['Erreur'] == '00000') ? 5 : 2;
            }
        }else{
            Klog::l('autoresponse NOK');
            $etat = 2;
        }
        return array(
            'etat' => $etat,
            'ref' => $_GET['Ref']
        );
	}

	public function retrouvePaiementEtape4s() {
		if(isset($_GET['Ref']) and !empty($_GET['Ref'])) return round($_GET['Ref']);
		return false;
	}

	public function affichageEtape5( $paiement, $commande ) {
		if($commande->Paye) return 'Votre commande a été enregistrée sous le numéro '. $commande->RefCommande;
		else return 'Une erreur est survenue lors du paiement de la commande '. $commande->RefCommande . '<br /> Vous pouvez contacter le support via ce <a href="/Contact">formulaire</a> en rappelant cette référence.';
	}
    public function sendDirectPayment($paiement) {
	    /**
         * Emepeche de passerplusieurs sur le débit.
         */
	    if ($paiement->DebitEffectue){
	        return;
        }
        // initialisation de la session https
        $curl = curl_init('https://preprod-ppps.paybox.com/PPPS.php');
        // PROD https://ppps.paybox.com/PPPS.php
        $facture = $paiement->getOneParent('Facture');
        $client = $facture->getOneParent('Client');

        //récupération des valeurs porteur : dateval
        $tmp = explode('  ',$client->IdentifiantCB);
        $PORTEUR= $tmp[0];
        $DATEVAL= substr($tmp[1],2,2).substr($tmp[1],0,2);

        // Précise que la réponse est souhaitée
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

        // Présise que le session est nouvelle
        curl_setopt($curl, CURLOPT_COOKIESESSION, true);

        $postfields = array(
            'VERSION'     => '00104',
            /*  00001 Autorisation seule
                00002 Débit (Capture)
                00003 Autorisation + Capture
                00004 Crédit */
            'TYPE'        => '00053',
            'SITE'        => $this->Params['IDSITE'],
            'RANG'        => $this->Params['RANG'],
            'NUMQUESTION' => $this->getNumQuestion(),
            'MONTANT'     => round($paiement->Montant * 100),
            'DEVISE'      => '978',
            'REFERENCE'   => sprintf("%06d", $paiement->Id),
            'PORTEUR'     => $PORTEUR,
            'DATEVAL'     => $DATEVAL,
            'REFABONNE'   => sprintf("CLI%06d", $client->Id),
            'ACTIVITE'    => '027',
            'DATEQ'       => date('dmYHis'), //'15102013'
            'HASH'        => 'SHA512'
        );
        //print_r($postfields);

        // Crée la chaine url encodée selon la RFC1738 à partir du tableau de paramètres séparés par le caractère &
        $trame = http_build_query($postfields, '', '&');
        // Si la clé est en ASCII, On la transforme en binaire
        $binKey = pack("H*", $this->Params['KEY']);

        //on génère la clef HMAC
        $hmac = strtoupper(hash_hmac('sha512', $trame, $binKey));

        $trame.="&HMAC=".$hmac;
        //print_r($trame);

        // Présise le type de requête HTTP : POST
        curl_setopt($curl, CURLOPT_POST, true);

        // Présise le Content-Type
        curl_setopt($curl,CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded'));

        // Ajoute les paramètres
        curl_setopt($curl, CURLOPT_POSTFIELDS, $trame);

        // Envoi de la requête et obtention de la réponse
        $response = curl_exec($curl);

        //echo "<PRE>";
        //echo "Réponse Paybox direct pour la demande 'autorize' ";
        //var_dump($response);
        //echo "</PRE>";

        // fermeture de la session
        curl_close($curl);
        //traitement du retour
        $ret= explode('&',$response);
        $out = array();
        foreach ($ret as $r){
            $t = explode('=',$r,2);
            $out[$t[0]]=utf8_encode($t[1]);
        }
        //modification du paieent pour définir le retour.
        /*return array(
            'etat' => $response,
            'ref' => $_GET['Ref']
        );*/
        /*$paiement->Detail.="\n**** DEBIT AUTO ****\n".print_r($out,true);
        $paiement->DebitEffectue = true;
        $paiement->Save();*/
        return $out;
    }

    /**
     * getNumQuestion
     * Genère un umero de question unique incrémenté par journée
     */
    private function getNumQuestion() {
        $filepath='Modules/Reservations/Plugins/TypePaiement/PayBox/payboxNumQuestion';
        //si le fichier n'existe pas ou si la date est d'hier
	    if (!file_exists($filepath)||date('z',filemtime($filepath))!=date('z')){
	        //creation du fichier avec première question
            $f = fopen($filepath,'w+');
            fputs($f,'0000000001');
            fclose($f);
            return '0000000001';
        }
        //sinon on incrémente la valeur
        $num = intval(file_get_contents($filepath))+1;
	    $num = sprintf('%010d',$num);
	    file_put_contents($filepath,$num);
	    return $num;
    }
}