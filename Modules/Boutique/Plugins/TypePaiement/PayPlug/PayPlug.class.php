<?php

/*********************************************
*
* Module de paiement
* Payplug
* Eng.Systems
* 
*********************************************/

require_once( dirname(dirname(__FILE__)).'/TypePaiement.interface.php' );

class BoutiqueTypePaiementPayPlug extends Plugin implements BoutiqueTypePaiementPlugin {

	/**
	* initStatePaiement
	* Initiliase le paiement avec ses propriétés particulières
	*/
	public function initStatePaiement() {
		return 0;
	}


	public function __construct() {
		if (!defined("PAYPLUG_LIB_DIR"))define("PAYPLUG_LIB_DIR", dirname(__FILE__));
		require_once(PAYPLUG_LIB_DIR."/Payplug.php");
	}

	/**
	 * getCodeHTML
	 * return the html code generated by the payment module.
	 * $paiement = Boutique/Paiement Objectclass
	 **/
	public function getCodeHTML( $paiement ) {
		
		//chargement de la configuration
		try {
			$parameters = Payplug::loadParameters($this->Params['USER_EMAIL'], $this->Params['USER_PASSWORD'], (boolean)$this->Params['TEST_MODE']);
			Payplug::setConfig($parameters);
		} catch (Exception $e) {
			return  '<div class="alert alert-danger">Identifiants invalides : '.$e->getMessage().'</div>';
		}

		//récupération du client
		$com = $paiement->getCommande();
		$client = $com->getClient();
		
		//creation de l'url de paiement
		$paymentUrl = PaymentUrl::generateUrl(array(
                                         'amount' => round($paiement->Montant * 100),
                                         'currency' => 'EUR',
                                         'email' => $client->Mail, 
                                         'firstName' => $client->Prenom,
                                         'lastName' => $client->Nom,
					 'order' => $com->Reference,
					 'customer' => $client->Id,
					 'origin' => $_SERVER['HTTP_HOST'],
                                         'ipnUrl' => "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Boutique/Commande/Etape4s'),
					 'cancelUrl' => "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Boutique/Commande/Etape5'),
					 'returnUrl' => "http://".$_SERVER['HTTP_HOST']."/".Sys::getMenu('Boutique/Commande/Etape5'),
					 'customData' => $paiement->Id
                                         ));

		// Redirects the user to the payment page
		header("Location: $paymentUrl");
		
		//on renvoie le formulaire
		return '<div class="alert alert-success">Redirection vers la banque en cours....</div>';
	}

	public function serveurAutoResponse( $paiement, $commande ) {
		if (!isset($_SERVER['PAYPLUG-SIGNATURE'])) return false;
		Klog::l('[PAYPLUG] Autoresponse');
		//chargement de la configuration
		try {
			$parameters = Payplug::loadParameters($this->Params['USER_EMAIL'], $this->Params['USER_PASSWORD'], (boolean)$this->Params['TEST_MODE']);
			Payplug::setConfig($parameters);
		} catch (Exception $e) {
			return  false;
		}
	
		try {
			$ipn = new IPN();
			
		} catch (InvalidSignatureException $e) {
			mail($GLOBALS["Systeme"]->Conf->get("GENERAL::INFO::ADMIN_MAIL"),"IPN Failed","The signature was invalid ".print_r($e,true));
		}

		Klog::l('[PAYPLUG] IPN received',$ipn);
		if ($ipn->state=="paid"){
			$etat = 1;
			
		}else {
			$etat = 2;
		}
		$message = "IPN received for ".$ipn->firstName." ".$ipn->lastName. " for an amount of ".(($ipn->amount)/100)." EUR \r\n".print_r($ipn,true);
		mail($GLOBALS["Systeme"]->Conf->get("GENERAL::INFO::ADMIN_MAIL"),"IPN Received ".$_SERVER['HTTP_HOST'],$message);

		return array(
			'etat' => $etat,
			'detail' => $ipn,
			'ref' => $ipn->idTransaction
		);
	}

	public function retrouvePaiementEtape4s() {
		if (!isset($_SERVER['PAYPLUG-SIGNATURE'])) return false;
		Klog::l('[PAYPLUG] Retrouve Paiement');
		//chargement de la configuration
		try {
			$parameters = Payplug::loadParameters($this->Params['USER_EMAIL'], $this->Params['USER_PASSWORD'], (boolean)$this->Params['TEST_MODE']);
			Payplug::setConfig($parameters);
		} catch (Exception $e) {
			return  false;
		}
	
		try {
			$ipn = new IPN();
		} catch (InvalidSignatureException $e) {
			return false;
			//mail($GLOBALS["Systeme"]->Conf->get("GENERAL::INFO::ADMIN_MAIL"),"IPN Failed","The signature was invalid ".print_r($e,true));
		}

		return $ipn->customData;
	}
	
	public function affichageEtape5( $paiement, $commande ) {
		if($commande->Paye) return 'Votre commande a été enregistrée sous le numéro '. $commande->RefCommande;
		else return 'Une erreur est survenue lors du paiement de la commande '. $commande->RefCommande . '<br /> Vous pouvez contacter le support via ce <a 	href="/Contact">formulaire</a> en rappelant cette référence.';
	}

}