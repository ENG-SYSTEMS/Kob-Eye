<?php
class RestorePoint extends genericClass {
    public function restoreNow() {
        $cmd = 'bash -c "exec nohup setsid php cron.php backup.abtel.local AbtelBackup/RestorePoint/'.$this->Id.'/restore.cron > /dev/null 2>&1 &"';
        exec($cmd);
        return true;
    }


    public function restore(){
        //init
        $GLOBALS['Systeme']->Db[0]->query("SET AUTOCOMMIT=1");

        //pour chaque vm
        $v =  $this->getOneParent('EsxVm');
        if (!$v) {
            $v = $this->getOneParent('SambaDevice');
        }
        if (!$v) return true;
        $borg = $this->getOneParent('BorgRepo');
        if (!$borg) return true;
        $task = genericClass::createInstance('Systeme', 'Tache');
        $task->Type = 'Collecteur';
        $task->Nom = 'Restore :' . $v->Titre .' -> '.$this->Titre;
        $task->addParent($v);
        $task->Save();


        try{
            $act = $task->createActivity(' > Restauration de la vm '.$v->Titre.' au point '.$this->Name.'');
            $act->addDetails('Création du chemin de restauration /backup/nfs/Restore/'.$v->Titre.'::'.$this->Name.'','yellow');
            AbtelBackup::localExec("if [ ! -d '/backup/nfs/Restore/".$v->Titre."::".$this->Name."' ]; then sudo mkdir -p '/backup/nfs/Restore/'; fi");
            $act->setProgression(15);
            $act->addDetails('Extraction borg '.$v->Titre.'::'.$this->Name,'yellow');
            $det = AbtelBackup::localExec("export BORG_PASSPHRASE='".BORG_SECRET."' && cd /backup/restore && borg extract ".$borg->Path."::".$this->Name."",$act);
            $act->setProgression(65);
            $act->addDetails('Décompression du fichier','yellow');
            AbtelBackup::localExec("cd /backup/restore && tar xvf '/backup/restore/backup/nfs/".$v->Titre.".tar'");
            $act->setProgression(70);
            $act->addDetails('Déplacement de la restauration','yellow');
            AbtelBackup::localExec("sudo mv '/backup/restore/backup/nfs/".$v->Titre."/".$v->Titre."-A' '/backup/nfs/Restore/".$v->Titre."::".$this->Name."'");
            $act->setProgression(75);
            $act->addDetails('Suppression de l\'archive','yellow');
            AbtelBackup::localExec("sudo rm -Rf '/backup/restore/backup'");
            $act->addDetails('Modification des droits','yellow');
            AbtelBackup::localExec("sudo chown nfsnobody:nfsnobody -R '/backup/nfs/Restore'");
            $act->setProgression(100);
            $act->addDetails('Vm disponible','yellow');
            $act->Terminate();
        }catch (Exception $e){
            $act->addDetails($v->Titre." ERROR => ".$e->getMessage(),'red');
            $act->Terminated = true;
            $act->Errors = true;
            $act->Save();
        }
        return true;
    }
    public function Delete(){
        $vm = $this->getOneParent('EsxVm');
        $borg = $vm->getOneParent('BorgRepo');
        try {
            //suppression de la version
            AbtelBackup::localExec("export BORG_PASSPHRASE='" . BORG_SECRET . "' && borg delete " . $borg->Path . "::".$this->Name, null);
        }catch (Exception $e){
            return parent::Delete(); // TODO: Change the autogenerated stub
        }
        return parent::Delete(); // TODO: Change the autogenerated stub
    }


    public function mountNow($params) {
        $step = 0;
        if(!empty($params['step']))
            $step = $params['step'];


        $GLOBALS['Systeme']->Db[0]->query("SET AUTOCOMMIT=1");

        $v =  $this->getOneParent('EsxVm');
        /*        if (!$v) {
            $v = $this->getOneParent('SambaDevice');
        }*/
        if (!$v) return 'Oups! On a pas trouvé la VM.';
        $borg = $this->getOneParent('BorgRepo');
        if (!$borg) return 'Oups! On a pas trouvé le dépot BORG.';

        switch ($step){

            case 0:
                try {
                    AbtelBackup::localExec("if [ ! -d '/backup/mount/borg' ]; then sudo mkdir -p '/backup/mount/borg'; fi");
                    //AbtelBackup::localExec("sudo chown -R backup. /backup/mount ");

                    //Clean d'eventuels montyages précedents
                    AbtelBackup::localExec('if mount | grep /backup/mount/vmdk > /dev/null; then for LINE in $(mount | grep /backup/mount/vmdk | cut -d" " -f3 ); do sudo  umount -fl $LINE; rmdir $LINE; done ; fi');
                    $ret = AbtelBackup::localExec('sudo losetup | grep "/backup/mount/borg" |  cut -d" " -f1');
                    if(!empty(trim($ret))){
                        $ret = AbtelBackup::localExec('sudo kpartx -d -v '.$ret);
                        $ret = AbtelBackup::localExec('sudo losetup -d  $( sudo losetup | grep /backup/mount/borg | cut -d" " -f1 )');
                    }


                    AbtelBackup::localExec("export BORG_PASSPHRASE='".BORG_SECRET."' &&  if mount | grep /backup/mount/borg > /dev/null; then sudo umount -l /backup/mount/borg; fi && sudo -E borg mount -o allow_other ".$borg->Path."::".$this->Name." /backup/mount/borg");

                    $vmdks = array();
                    $files = scandir("/backup/mount/borg/backup/nfs/".$v->Titre."/".$v->Titre."-A");
                    foreach( $files as $file){
                        if(strpos($file,'.vmdk')){
                            $vmdks[] = array('name'=>$file,"size"=>AbtelBackup::human_filesize(filesize("/backup/mount/borg/backup/nfs/".$v->Titre."/".$v->Titre."-A/".$file)));
                        }
                    }
                } catch (Exception $e) {
                    print_r($e);
                    return array (
                        'errors' => array('Message' => "Oups il y a eu une erreur! Veuillez réessayer."),
                        'data' => "Erreur"
                    );
                }
                return array (
                    'template'=>"mountVmdk",
                    'step'=>1,
                    'callNext'=>array (
                        'nom'=>'mountNow',
                        'title'=>'Récupération des fichiers'
                    ),
                    'funcTempVars' => array(
                        'step'=> $step,
                        'files' => $vmdks
                    )
                );
                break;
            case 1:
                try {
                    AbtelBackup::localExec("if [ ! -d '/backup/mount/vmdk' ]; then sudo mkdir -p '/backup/mount/vmdk'; fi");
                    AbtelBackup::localExec('if mount | grep /backup/mount/vmdk > /dev/null; then for LINE in $(mount | grep /backup/mount/vmdk | cut -d" " -f1 ); do sudo  umount -l $LINE; rmdir $LINE; done ; fi');

                    //AbtelBackup::localExec("sudo chown -R backup. /backup/mount ");
                    $ret = AbtelBackup::localExec('sudo losetup | grep "/backup/mount/borg" |  cut -d" " -f1');
                    if(!empty(trim($ret))){
                        $ret = AbtelBackup::localExec('sudo kpartx -d -v '.$ret);
                        //print_r($ret);
                    }
                    $ret = AbtelBackup::localExec("sudo kpartx -av /backup/mount/borg/backup/nfs/".$v->Titre."/".$v->Titre."-A/".$params['file']);

                    $ret = AbtelBackup::localExec("sudo blkid -t TYPE=\"ntfs\"");
                    foreach(preg_split("/((\r?\n)|(\r\n?))/", $ret) as $line){
                        preg_match('/loop[0-9]+p[0-9]+/', $line, $matches);
                        if(!empty($matches[0])) {
                            AbtelBackup::localExec("sudo mkdir -p '/backup/mount/vmdk/" . $matches[0] . "'");
                            AbtelBackup::localExec("sudo mount -o ro '/dev/mapper/" . $matches[0] . "' '/backup/mount/vmdk/" . $matches[0] . "'");
                        }
                    }

                } catch (Exception $e) {
                    //print_r($e);
                    return array (
                        'error' => "Oups il y a eu une erreur! Veuillez réessayer.",
                        'data' => "Erreur"
                    );
                }

                return array (
                    'template'=>"mountVmdk",
                    'step'=>2,
                    'callNext'=>array (
                        'nom'=>'mountNow',
                        'title'=>'Nettoyage'
                    ),
                    'funcTempVars' => array(
                        'step'=> $step
                    )
                );
                break;
            case 2:
                try {
                    AbtelBackup::localExec("if [ ! -d '/backup/mount/borg' ]; then sudo mkdir -p '/backup/mount/borg'; fi");
                    //AbtelBackup::localExec("sudo chown -R backup. /backup/mount ");

                    //Clean d'eventuels montyages précedents
                    AbtelBackup::localExec('if mount | grep /backup/mount/vmdk > /dev/null; then for LINE in $(mount | grep /backup/mount/vmdk | cut -d" " -f3 ); do sudo  umount -l $LINE; sudo rmdir $LINE; done ; fi');
                    $ret = AbtelBackup::localExec('sudo losetup | grep "/backup/mount/borg" |  cut -d" " -f1');
                    if(!empty(trim($ret))){
                        $ret = AbtelBackup::localExec('sudo kpartx -d -v '.$ret);
                        $ret = AbtelBackup::localExec('sudo losetup -d  $( sudo losetup | grep /backup/mount/borg | cut -d" " -f1 )');
                    }

                    AbtelBackup::localExec("if mount | grep /backup/mount/borg > /dev/null; then sudo umount -l /backup/mount/borg; fi");
                    AbtelBackup::localExec("if ls /var/www/html | grep .zip > /dev/null; then yes | rm /var/www/html/*.zip; fi");

                } catch (Exception $e) {
                    print_r($e);
                    return array (
                        'errors' => array('Message' => "Oups il y a eu une erreur! Veuillez réessayer."),
                        'data' => "Erreur"
                    );
                }
                return array (
                    'data' => 'Nettoyage des données terminé.'
                );

                break;

        }
    }

}