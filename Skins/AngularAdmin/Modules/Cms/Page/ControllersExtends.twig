app.controller('{{ identifier }}FicheCtrlExtends', function($interval,$location, $compile, $sce, $scope, $rootScope, $routeParams,$http,{{ identifier }}Store) {

    //Gestion du 'snapping' pour tomber sur des col-md-x
    var step = 100/12;
    var snaps = new Array();
    for(i=1; i<13;i++){
        snaps[i] = i*step;
    }

    //Recupere le col-md- et la nouvelle size correspondant a une size flottante
    var snapSize = function(size){
        var diff = 100;
        var index = false;
        for(var n in snaps){
            if(Math.abs(size - snaps[n]) < diff){
                diff = Math.abs(size - snaps[n]);
                index = n;
            }
        }

        return index;
    }

    //Recupere le prochain (ou le precedent) élément sibling
    function nextByAttribute(node, attr, previous) {
        while (node) {
            node = previous ? node.previousElementSibling : node.nextElementSibling;
            if (node && node.getAttribute(attr)) {
                return node;
            }
        }
        return null;
    }




    var getObj = $interval(function(){
        if($scope.obj){
            $interval.cancel(getObj);
            var parser = new DOMParser();

            $scope.tempHtml = parser.parseFromString($scope.obj.HtmlConfig,"text/html");
            $scope.tempConfig = parser.parseFromString($scope.obj.TemplateConfig,"text/xml");

            $scope.initHtml = parser.parseFromString($scope.obj.HtmlConfig,"text/html");
            $scope.initConfig = parser.parseFromString($scope.obj.TemplateConfig,"text/xml");

            $scope.compoList = {{ Components | raw }};
            //console.log($scope.compoList);
            $scope.component = {};
            $scope.ui = '';
            $scope.modalObj = {fieldErrors: []};

            //Init du compte des zones
            $scope.maxZone = 0;
            var zones = $scope.tempConfig.getElementsByTagName('ZONE');
            for(var n in zones){
                if(zones[n] instanceof Element){
                    var zid = zones[n].getAttribute('tag');
                    zid = zid.split('_')[1];
                    if(parseInt($scope.maxZone) < parseInt(zid)){
                        $scope.maxZone = zid;
                    }
                }
            }

            //Init du compte des row
            $scope.maxRow = 0;
            var rows = $scope.tempHtml.querySelectorAll('[data-row]');
            for(var n in rows){
                if(rows[n] instanceof HTMLDivElement && $scope.maxRow < rows[n].getAttribute('data-row'))
                    $scope.maxRow = rows[n].getAttribute('data-row')
            }


            $scope.$watch(function($scope){
                return $scope.obj.HtmlConfig;
            },function(){
                //console.log($scope.obj.HtmlConfig);
                $scope.updateInterface();
            });

            $scope.$watch(function($scope){
                return $scope.obj.TemplateConfig;
            },function(){
                //console.log($scope.obj.TemplateConfig);
                $scope.updateInterface();
            });
        }
    },100,50);


    /////Gestion des lignes
    $scope.createRow = function(parent,order){
        $scope.maxRow++;
        $scope.maxZone++;
        var newDiv = '<div data-row="'+ $scope.maxRow +'" data-order="'+order+'" class="row cms-row"> \
                            <div data-col="'+$scope.maxZone+'" data-order="1" class="cms-col col-md-12" data-width="100" data-zone="ZONE_'+$scope.maxZone+'">[ZONE_'+$scope.maxZone+']</div> \
                      </div>';
        //transformation string en node html
        var div = document.createElement('div');
        div.innerHTML = newDiv;
        newDiv = div.firstChild;

        var current = new Array();
        if(order != undefined){
            current = $scope.tempHtml.querySelectorAll('[data-order="'+order+'"]');
        }

        if(!parent){
            var parent = $scope.tempHtml.querySelectorAll('[data-dv]')[0];
        } else {
            var parent = $scope.tempHtml.querySelectorAll('[data-dv="'+parent+'"]')[0];
        }
        if(current.length){
            parent.insertBefore(newDiv,current[0]);

        }else{
            parent.insertBefore(newDiv,null);
        }

        $scope.reorder();
        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;

        var parser = new DOMParser();
        var newZone = parser.parseFromString('<TEMP><ZONE tag="ZONE_'+$scope.maxZone+'"> </ZONE></TEMP>',"text/xml");
        newZone =  newZone.getElementsByTagName('ZONE')[0];

        var parent = $scope.tempConfig.getElementsByTagName('ZONES')[0];
        parent.insertBefore(newZone,null);
        $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;
    };
    $scope.moveRow = function(rowId,order,dvId){
        var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
        var current = $scope.tempHtml.querySelectorAll('[data-order="'+order+'"]');
        if(!parent){
            return false
        } else {
            var parent = $scope.tempHtml.querySelectorAll('[data-dv="'+dvId+'"]')[0];
        }
        if(current.length){
            parent.insertBefore(row,current[0]);
        }else{
            parent.insertBefore(row,null);
        }
        $scope.reorder();
        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
    };
    $scope.delRow = function(rowId){
        swal({
                title: "Êtes vous sûr de vouloir supprimer cette section ?",
                text: "Cette suppression sera définitive, et elle entraînera la suppression de tout les composants affectés à cette section. ",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                cancelButtonText: "Annuler",
                confirmButtonText: "Oui, supprimer !",
                closeOnConfirm: true
            },
            function(){
                var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
                var cols = row.querySelectorAll('[data-col]');

                for(var n in cols){
                    if( !(cols[n] instanceof HTMLDivElement)) continue;

                    var zone = cols[n].getAttribute('data-zone');

                    $scope.tempConfig.querySelectorAll('[tag='+zone+']')[0].remove();
                    $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;
                }
                row.remove();
                $scope.reorder();
                $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
                $scope.$apply();
            });
    };

    /////Gestion des colonnes
    $scope.createCol = function(rowId,order){
        $scope.maxZone++;
        var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
        var cols = row.querySelectorAll('[data-col]');
        var colWidth = $scope.recalc(rowId);
        if(!colWidth) return false;
        var newDiv = '<div data-col="'+$scope.maxZone+'" data-order="1" class="cms-col col-md-'+colWidth+'" data-zone="ZONE_'+$scope.maxZone+'" data-width="'+snaps[colWidth]+'">[ZONE_'+$scope.maxZone+']</div>';
        //transformation string en node html
        var div = document.createElement('div');
        div.innerHTML = newDiv;
        newDiv = div.firstChild;

        var current = row.querySelectorAll('[data-order="'+order+'"]');
        if(current.length){
            row.insertBefore(newDiv,current[0]);
        }else{
            row.insertBefore(newDiv,null);
        }


        $scope.reorder(rowId);
        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;

        var parser = new DOMParser();
        var newZone = parser.parseFromString('<TEMP><ZONE tag="ZONE_'+$scope.maxZone+'"> </ZONE></TEMP>',"text/xml");
        newZone =  newZone.getElementsByTagName('ZONE')[0];

        var parent = $scope.tempConfig.getElementsByTagName('ZONES')[0];
        parent.insertBefore(newZone,null);
        $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;
    };
    $scope.moveCol = function(colId,order,rowId){
        var col = $scope.tempHtml.querySelectorAll('[data-col="'+colId+'"]')[0];
        var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
        if(!rowId){
            return false;
        } else {
            var parent = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
        }
        var current = $scope.tempHtml.querySelectorAll('[data-order="'+order+'"]');
        if(current.length){
            parent.insertBefore(row,current[0]);
        }else{
            parent.insertBefore(row,null);
        }
        $scope.reorder();
        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
    };
    $scope.delCol = function(colId){
        swal({
                title: "Êtes vous sûr de vouloir supprimer ce composant ?",
                text: "Cette suppression sera définitive et elle entraînera la perte de la configuration qui lui était liée.",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                cancelButtonText: "Annuler",
                confirmButtonText: "Oui, supprimer !",
                closeOnConfirm: true
            },
            function(){
                var col = $scope.tempHtml.querySelectorAll('[data-col="'+colId+'"]')[0];
                var row = col.parentNode;

                var bSib = nextByAttribute(col,'data-col');
                if(!bSib) bSib = nextByAttribute(col,'data-col',true);
                if(bSib){
                    bSWidth = parseInt(bSib.getAttribute('data-width'))+parseInt(col.getAttribute('data-width'));
                    $scope.resizeWidth(bSib,bSWidth);
                }

                col.remove();

                $scope.reorder(row.getAttribute('data-row'));
                $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;

                var zone = col.getAttribute('data-zone');

                $scope.tempConfig.querySelectorAll('[tag='+zone+']')[0].remove();
                $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;
                $scope.$apply();
            });

    };

    //Gestion de composants
    $scope.getComponent = function(zoneId){
        var zone = $scope.tempConfig.querySelectorAll('[tag="'+zoneId+'"]')[0];

        if(!zone)
            return false;

        $scope.component = {zone:zone,Name:'Veuillez choisir le type de composant désiré.'};

        if(!(compo = zone.firstElementChild))
            return false;

        var title = compo.getAttribute('title');
        var module = compo.getAttribute('module');

        if(!$scope.setComponent(module+title)) return false;
        $scope.modalObj.title = $scope.component.Name;


        for(var n=0; n< $scope.component.Proprietes.length; n++){
            var param = zone.querySelectorAll('[name="'+$scope.component.Proprietes[n].Nom+'"]')[0];
            $scope.modalObj[$scope.component.Proprietes[n].Nom] = param != undefined ? param.childNodes[0].nodeValue : '';
        }

        return true;
    }
    $scope.setComponent = function(identifier){
        if(!identifier)
            return false;

        var component = $scope.compoList[identifier];
        if(component){
            $scope.component = angular.merge($scope.component,component);
            $scope.component.chemin = $scope.component.Path.split('/')
            $scope.component.chemin.pop();
            $scope.component.chemin.push('Component.conf');
            $scope.component.chemin = $scope.component.chemin.join('/');
            $scope.compoUrl = '/Systeme/Utils/Component/configComponent.htm?Module='+$scope.component.Module+'&Component='+$scope.component.Title;
            //console.log($scope.component);
        } else {
            return false;
        }

        return true;
    }
    $scope.configComponent = function(zone){
        $scope.getComponent(zone);

        console.log($scope.component);
        console.log('edit component', $scope.component);

        $("#modalComponent").modal();
    };
    $scope.addComponent = function(identifier){
        $scope.setComponent(identifier);

        for(var n=0; n< $scope.component.Proprietes.length; n++){
            $scope.modalObj[$scope.component.Proprietes[n].Nom] = '';
        }

        //modalobj = $scope.modalObj;
        $scope.compoUrl = '/Systeme/Utils/Component/configComponent.htm?Module='+$scope.component.Module+'&Component='+$scope.component.Title;

    };
{#    $scope.delComponent = function(zone){

    };#}
    $scope.componentSave = function (){
        console.log('save component',$scope.component,$scope.modalObj);
        var zone = $scope.component.zone;
        var zId = zone.getAttribute('tag');
        var compo = $scope.component;


        if(zone.getElementsByTagName('COMPONENT').length){
            zone.getElementsByTagName('COMPONENT')[0].remove();
        }

        var compoString ='  <COMPONENT title="'+compo.Title+'" module="'+compo.Module+'"> \
                            <TITLE>'+compo.Name+'</TITLE> \
                            <CSS>'+compo.Css+'</CSS> \
                            <SCREEN>'+compo.Screen+'</SCREEN> \
                            <PARAMS>';
        for(var n=0;n < compo.Proprietes.length;n++){
            compoString +=   '<PARAM name="'+compo.Proprietes[n].Nom+'" type="'+compo.Proprietes[n].Type+'" description="'+compo.Proprietes[n].description+'"><![CDATA['+$scope.modalObj[compo.Proprietes[n].Nom]+']]></PARAM>';
        }
        compoString += '</PARAMS> \
                        </COMPONENT>';
        var parser = new DOMParser();
        var newcompo = parser.parseFromString('<TEMP>'+compoString+'</TEMP>',"text/xml");
        newcompo =  newcompo.getElementsByTagName('COMPONENT')[0];

        var parent = $scope.tempConfig.querySelectorAll('[tag="'+zId+'"]')[0];
        parent.insertBefore(newcompo,null);



        $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;

        //affichage spinner
        $('#modalComponent .modal-dialog').spin();

        //on save

        console.log('save ',$scope.obj);
        {{ identifier }}Store.saveData($scope.obj).then(function (data) {
            $('#modalComponent .modal-dialog').spin(false);
            if (data.success){
                $scope.modalObj.success = data.success;
                $scope.modalObj.warning = data.warning;
                $scope.modalObj.errors = data.errors;
                $scope.modalObj.infos = data.infos;
                if (!data.warning.length&&!data.success.length)
                $('#modalComponent').modal('toggle');
                {{ identifier }}Store.refresh();
            }else {
                //gestion des erreurs
                $scope.modalObj.errors = data.errors;
                $scope.modalObj.success = data.success;
                $scope.modalObj.warning = data.warning;
                $scope.modalObj.infos = data.infos;
                $scope.modalObj.fieldErrors = [];
                for (var e in data.errors) {
                    $scope.modalObj.fieldErrors.push(data.errors[e].Prop);
                }
                console.log('tab field error',$scope.modalObj.fieldErrors);
            }
            console.log('save obj',data);
        });
    }




    //Reorganisation des  rows/cols
    $scope.reorder = function(rowId){
        if(rowId){
            var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]');
            var cols = row[0].querySelectorAll('[data-col]');
            var colOrder = 1;
            for(var n in cols){
                if(cols[n] instanceof HTMLDivElement){
                    cols[n].setAttribute('data-order',colOrder);
                    colOrder++;
                }
            }
        }else{
            var dvContainers = $scope.tempHtml.querySelectorAll('[data-dv]');
            for(var n=0; n < dvContainers.length; n++){
                console.log('> Reorder dv : '+n);
                var rows = dvContainers[n].querySelectorAll('[data-row]');
                var rowOrder = 1;
                for(var m=0; m < rows.length; m++){
                    console.log('>> Reorder row : '+m);
                    if(rows[m] instanceof HTMLDivElement){
                        rows[m].setAttribute('data-order',rowOrder);
                        rowOrder++;
                    }
                }
            }
        }
    };
    //Recalcul de largeurs en gardant les ratios des premieres colonnes
    $scope.recalc = function(rowId){
        var row = $scope.tempHtml.querySelectorAll('[data-row="'+rowId+'"]')[0];
        var cols = row.querySelectorAll('[data-col]');
        var nbCols = parseInt(cols.length) + 1;
        if(nbCols > 12) return false;
        var newColWidth = snapSize(100/nbCols);
        var spare = 12-newColWidth;
        var used = 0;
        var colSnaps = new Array();
        for(var n in cols){
            if(cols[n] instanceof HTMLDivElement){
                var oldRatio =  parseInt(cols[n].getAttribute('data-width'))/100;
                var newWidth = Math.floor(oldRatio*spare);
                if(newWidth == 0) newWidth=1;
                colSnaps.push(newWidth);
                used += parseInt(newWidth);
            }
        }

        var left = spare - used;
        var i = 0;
        while (left > 0){
            colSnaps[i]++;
            i++;
            left--;
        }
        for(var n in colSnaps){
            $scope.resizeWidth(cols[n],snaps[colSnaps[n]]);
        }


        return newColWidth;
    };

    $scope.pageCancel = function(){
        swal({
            title: "Êtes vous sûr de vouloir annuler les modifications apportées à l'agencement de la page réalisées lors de cette session ?",
            text: "Cette opération entraînera la perte de toutes les modifications effectuées depuis le dernier chargement de cette page. ",
            type: "warning",
            showCancelButton: true,
            confirmButtonClass: "btn-danger",
            cancelButtonText: "Annuler",
            confirmButtonText: "Oui, tout annuler !",
            closeOnConfirm: true
        },
        function(){
            $scope.tempHtml = angular.copy($scope.initHtml);
            $scope.tempConfig = angular.copy($scope.initConfig);

            $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
            $scope.obj.TemplateConfig = $scope.tempConfig.documentElement.outerHTML;

            $scope.updateInterface();
            $scope.pageSave();
        });

    }
    $scope.pageSave = function(){
        $('#pageOrg').spin();
        {{ identifier }}Store.saveData($scope.obj).then(function (data) {
            $('#pageOrg').spin(false);
            if (data.success){
                $scope.obj.success = data.success;
                $scope.obj.warning = data.warning;
                $scope.obj.errors = data.errors;
                $scope.obj.infos = data.infos;
                if (!data.warning.length&&!data.success.length)
                {{ identifier }}Store.refresh();
            }else {
                //gestion des erreurs
                $scope.obj.errors = data.errors;
                $scope.obj.success = data.success;
                $scope.obj.warning = data.warning;
                $scope.obj.infos = data.infos;
                $scope.obj.fieldErrors = [];
                for (var e in data.errors) {
                    $scope.obj.fieldErrors.push(data.errors[e].Prop);
                }
                console.log('tab field error',$scope.obj.fieldErrors);
            }
            console.log('save obj',data);
        });

    }
    $scope.pageReinit = function(){
        swal({
        title: "Êtes vous sûr de vouloir réinitialiser l'agencement de cette page ?",
        text: "Cette réinitialisation entraînera la perte de tous les composant et vous retrouverez une page vierge. ",
        type: "warning",
        showCancelButton: true,
        confirmButtonClass: "btn-danger",
        cancelButtonText: "Annuler",
        confirmButtonText: "Oui, réinitialiser !",
        closeOnConfirm: true
        },
        function(){
            $scope.obj.HtmlConfig = '';
            $scope.obj.TemplateConfig = '';
            {{ identifier }}Store.saveData($scope.obj).then(function (data) {
                angular.extend($scope.obj, data.data);
                $('#pageOrg').spin(false);
                if (data.success){
                    $scope.obj.success = data.success;
                    $scope.obj.warning = data.warning;
                    $scope.obj.errors = data.errors;
                    $scope.obj.infos = data.infos;
                    if (!data.warning.length&&!data.success.length)
                    {{ identifier }}Store.refresh();
                }else {
                    //gestion des erreurs
                    $scope.obj.errors = data.errors;
                    $scope.obj.success = data.success;
                    $scope.obj.warning = data.warning;
                    $scope.obj.infos = data.infos;
                    $scope.obj.fieldErrors = [];
                    for (var e in data.errors) {
                        $scope.obj.fieldErrors.push(data.errors[e].Prop);
                    }
                    console.log('tab field error',$scope.obj.fieldErrors);
                }
                console.log('save obj',data);
            });
        });
    }


    //Generation de l'interface utilisateur
    $scope.updateInterface = function(){
        var parser = new DOMParser();

        $scope.tempHtml = parser.parseFromString($scope.obj.HtmlConfig,"text/html");
        $scope.tempConfig = parser.parseFromString($scope.obj.TemplateConfig,"text/xml");

        $('#pageOrg').spin();

        var base = angular.copy($scope.tempHtml);
        var body = base.querySelectorAll('body')[0];
        var dvContainers = base.querySelectorAll('[data-dv]');
        var rows = base.querySelectorAll('[data-row]');
        var cols = base.querySelectorAll('[data-col]');
{#
        //Ajout du titre
        var newDiv = '<div class="row pageHeader" ng-bind-html="obj.Titre"></div>';
        //transformation string en node html
        var div = document.createElement('div');
        div.innerHTML = newDiv;
        newDiv = div.firstChild;
        body.insertBefore(newDiv,body.firstChild);#}

        //Ajout des boutons pour ajouter des lignes...
        for(n in dvContainers){
            if(!(dvContainers[n] instanceof HTMLDivElement))
                continue;

            var newDiv = '<div class="row addRow">  \
                            <button type="button" class="btn btn-primary"  ng-click="createRow('+dvContainers[n].getAttribute('data-dv')+')" title="Ajouter une section"><i class="icmn-plus2"></i><span class="sectButton">Ajouter une section</span></button> \
                          </div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            dvContainers[n].insertBefore(newDiv,null);
            dvContainers[n].setAttribute('ng-drop','true');
            dvContainers[n].setAttribute('data-drop','col');
            dvContainers[n].setAttribute('ng-drop-success','dropRow($data,$event,$target,$source)');
        }

        //Ajout de boutons pour supprimer des rows / ajouter des colonnes / Mise en place du dragndrop
        for(n in rows) {
            if (!(rows[n] instanceof HTMLDivElement))
                continue;

            var newDiv = '<div class="row button-container" r-ignore > \
                            <div class="addCol">  \
                                <button type="button" class="btn btn-primary"  ng-click="createCol(' + rows[n].getAttribute('data-row') + ')" title="Ajouter un composant"><i class="icmn-plus2"></i><span class="compoButton">Ajouter un composant</button> \
                            </div><div class="delRow">  \
                                <button type="button" class="btn btn-danger"  ng-click="delRow(' + rows[n].getAttribute('data-row') + ')" title="Supprimer la section"><i class="icmn-cross"></i><span class="sectButton">Supprimer la section</button> \
                            </div> \
                        </div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            var par = rows[n].parentNode;
            rows[n].insertBefore(newDiv, null);
            //par.insertBefore(newDiv, rows[n].nextSibling);

            var newDiv = '<div class="dragHandle" r-ignore ng-drag-handle><i class="fa fa-arrows" aria-hidden="true"></i></div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            rows[n].insertBefore(newDiv, null);

            rows[n].setAttribute('ng-drag', 'true');
            rows[n].setAttribute('ng-drop', 'true');
            rows[n].setAttribute('data-drop', 'col');
            rows[n].setAttribute('ng-drop-success', 'dropCol($data,$event,$target,$source)');

        }


        //Ajout de boutons pour supprimer des colonnes / choisir des composants
        for(n in cols){
            if(!(cols[n] instanceof HTMLDivElement)) continue;

            //Affichage du composant à l'intérieur
            if($scope.getComponent(cols[n].getAttribute('data-zone'))){
            var compoHtml = '<div class="compoShow"> \
                <i class="compoDisplay '+($scope.component.Screen ? $scope.component.Screen : 'icmn-question3' )+'" title="'+ $scope.component.Name +'" alt="'+ $scope.component.Name +'"></i> \
                <span class="compoTitle">'+ $scope.component.Name +'</span> \
            </div>';
            } else{
            var compoHtml = '<div class="compoShow emptyCompo"> \
                <i class="compoDisplay icmn-cog3" title="Non choisi" alt="Non Choisi"></i> \
                <span class="compoTitle">Composant non choisi</span> \
            </div>';
            }
            cols[n].innerHTML = compoHtml;


            var newDiv = '<div class="configComp">  \
                            <button type="button" class="btn btn-warning"  ng-click="configComponent(\''+cols[n].getAttribute('data-zone')+'\')" title="Configurer le composant"><i class="icmn-pencil"></i><span class="compoButton" >Configurer le composant</span></button> \
                        </div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            cols[n].insertBefore(newDiv,null);

            var newDiv = '<div class="delCol">  \
                                <button type="button" class="btn btn-danger"  ng-click="delCol('+cols[n].getAttribute('data-col')+')" title="Supprimer le composant"><i class="icmn-cross"></i><span class="compoButton">Supprimer le composant</button> \
                            </div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            cols[n].insertBefore(newDiv,null);

            var newDiv = '<div class="dragHandle" ng-drag-handle><i class="fa fa-arrows" aria-hidden="true"></div>';
            //transformation string en node html
            var div = document.createElement('div');
            div.innerHTML = newDiv;
            newDiv = div.firstChild;
            cols[n].insertBefore(newDiv,null);

            cols[n].setAttribute('ng-drag','true');

            var sib  = cols[n].nextElementSibling;

            if( sib instanceof HTMLDivElement && sib.getAttribute('data-col')){
                cols[n].setAttribute('resizable','');
                cols[n].setAttribute('r-directions',"['right']");
                cols[n].setAttribute('r-type','fullRow');
            }
        }

        $scope.ui= base.querySelectorAll('body')[0].innerHTML;
        $scope.component = {};

        $('#pageOrg').spin(false);
    };

    $scope.dropRow = function(data,evt,target,source){
        var droped = evt.element[0];
        var dropedOn = source.node[0];

        var tempDroped = $scope.tempHtml.querySelectorAll('[data-row="'+evt.element[0].getAttribute('data-row')+'"]')[0];
        var tempDropedOn = $scope.tempHtml.querySelectorAll('[data-dv="'+source.node[0].getAttribute('data-dv')+'"]')[0];

        if(!droped.getAttribute("data-row")) return false;

        var rows = dropedOn.querySelectorAll('[data-row]');
        var next = dropedOn.querySelectorAll('.addRow')[0];
        var tempNext =null;

        for(var n=0; n < rows.length; n++){
            if(droped == rows[n]) continue;
            var bounds = rows[n].getBoundingClientRect();
            var posX = Math.ceil(bounds.left+window.scrollX);
            var posY = Math.ceil(bounds.top+window.scrollY);
            var width = rows[n].offsetWidth;
            var height = rows[n].offsetHeight;
            var middleX = (posX + width/2);
            var middleY = (posY + height/2);

            if(middleY < evt.y) continue;
            if(middleY >= evt.y){
                next = rows[n];
                tempNext = $scope.tempHtml.querySelectorAll('[data-row="'+next.getAttribute('data-row')+'"]')[0];
                break;
            }
        }

        dropedOn.insertBefore(droped,next);
        tempDropedOn.insertBefore(tempDroped,tempNext);
        $scope.reorder();

        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
        //console.log('dropRow',data,evt,target,source);
    };
    $scope.dropCol = function(data,evt,target,source){
        var droped = evt.element[0];
        var dropedOn = source.node[0];

        var rowId = source.node[0].getAttribute('data-row');
        var tempDroped = $scope.tempHtml.querySelectorAll('[data-col="'+evt.element[0].getAttribute('data-col')+'"]')[0];
        var tempDropedOn = $scope.tempHtml.querySelectorAll('[data-row="'+source.node[0].getAttribute('data-row')+'"]')[0];

        if(!droped.getAttribute("data-col")) return false;

        var cWidth = droped.getAttribute('data-width');
        var cols = dropedOn.querySelectorAll('[data-col]');

        var aSib = null;
        var tempASib =null;
        var next = dropedOn.querySelectorAll('.button-container')[0];
        var tempNext =null;


        for(var n=0; n < cols.length; n++){
            if(droped == cols[n]) continue;
            var bounds = cols[n].getBoundingClientRect();
            var posX = Math.ceil(bounds.left+window.scrollX);
            var posY = Math.ceil(bounds.top+window.scrollY);
            var width = cols[n].offsetWidth;
            var height = cols[n].offsetHeight;
            var middleX = (posX + width/2);
            var middleY = (posY + height/2);

            if(middleX < evt.x) {
                aSib = cols[n];
                tempASib = $scope.tempHtml.querySelectorAll('[data-col="'+aSib.getAttribute('data-col')+'"]')[0];
            };
            if(middleX >= evt.x){
                next = aSib = cols[n];
                tempNext = tempASib = $scope.tempHtml.querySelectorAll('[data-col="'+next.getAttribute('data-col')+'"]')[0];
                {#console.log('[data-col="'+next.getAttribute('data-col')+'"]');
                console.log(aSib,tempASib);
                console.log(next,tempNext);#}
                break;
            }
        }


        if(dropedOn !== droped.parentNode){
            //TODO reorder parent

            var bSib = nextByAttribute(droped,'data-col');
            if(!bSib) bSib = nextByAttribute(droped,'data-col',true);


            if(bSib){
                bSWidth =parseInt(bSib.getAttribute('data-width'))+parseInt(cWidth);
                $scope.resizeWidth(bSib,bSWidth);
            }

            var sWidth = null;
            var nSWidth = null;
            var nCWidth = null;
            if(aSib){
                sWidth = parseInt(aSib.getAttribute('data-width'));
                cWidth = parseInt(cWidth);
                nSWidth = Math.floor(sWidth*sWidth/(sWidth+cWidth));
                nCWidth = Math.ceil(cWidth*sWidth/(sWidth+cWidth));

                $scope.resizeWidth(aSib,nSWidth);
                $scope.resizeWidth(droped,nCWidth);
            } else{
                $scope.resizeWidth(droped,100);
            }
        }


        dropedOn.insertBefore(droped,next);
        tempDropedOn.insertBefore(tempDroped,tempNext);

        $scope.reorder(rowId);

        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
        //console.log('dropRow',data,evt,target,source);
    };


    $scope.$on('abt-resizable.resizeEnd', function(event,info){
        var elem = info.element;
        if( rcol = elem.getAttribute('data-col')){
            var clearElem = $scope.tempHtml.querySelectorAll('[data-col="'+rcol+'"]')[0];
        }else if( rrow = elem.getAttribute('data-row')){
            var clearElem = $scope.tempHtml.querySelectorAll('[data-row="'+rrow+'"]')[0];
        }else if( rdv = elem.getAttribute('data-dv')){
            var clearElem = $scope.tempHtml.querySelectorAll('[data-dv="'+rdv+'"]')[0];
        }

        if( cEWidth = elem.getAttribute('data-width')){
            $scope.resizeWidth(elem,cEWidth);
        }
        if( cEHeight = elem.getAttribute('data-height')) {
            clearElem.setAttribute('data-height',cEHeight);
            clearElem.setAttribute('style',elem.getAttribute('style'));
        }



        var next = info.next;
        if(next){

            if( nrcol = next.getAttribute('data-col')){
                var nclearElem = $scope.tempHtml.querySelectorAll('[data-col="'+nrcol+'"]')[0];
            }else if( nrrow = next.getAttribute('data-row')){
                var nclearElem = $scope.tempHtml.querySelectorAll('[data-row="'+nrrow+'"]')[0];
            }else if( nrdv = next.getAttribute('data-dv')){
                var nclearElem = $scope.tempHtml.querySelectorAll('[data-dv="'+nrdv+'"]')[0];
            }

            if( ncEWidth = next.getAttribute('data-width')){
                $scope.resizeWidth(next,ncEWidth);
            }
            if( ncEHeight = next.getAttribute('data-height')) {
                nclearElem.setAttribute('data-height',ncEHeight);
                nclearElem.setAttribute('style',next.getAttribute('style'));
            }

        }


        $scope.obj.HtmlConfig = $scope.tempHtml.querySelectorAll('body')[0].innerHTML;
    });




    //Resize une div pour la fitter a du col-md-x
    $scope.resizeWidth = function(elem,size){
            var rcol = elem.getAttribute('data-col');
            var clearElem = $scope.tempHtml.querySelectorAll('[data-col="'+rcol+'"]')[0];

            snapIndex = snapSize(size);
            clearElem.setAttribute('data-width',snaps[snapIndex]);

            clearElem.className = clearElem.className.replace(/col-md-[0-9]{1,2}/,'');
            clearElem.className += ' col-md-'+snapIndex;

            if(clearElem.getAttribute('style'))
                clearElem.setAttribute('style', clearElem.getAttribute('style').replace(/width.*;/,''));

            return snapIndex;
    }



    //OVERRRIDE
    $scope.modify = function (obj){
        console.log('edit ',obj.id);

        $scope.modalObj = $scope.obj ;
        $scope.modalObj.success = false ;
        $scope.modalObj.title = 'Modifier {{ description }} '+obj.label;
        console.log('edit obj',$scope.modalObj);
        $("#modalfiche-{{ identifier }}").modal();
    }



});

app.directive('compileBind', ['$compile', function ($compile) {
    return function(scope, element, attrs) {
        scope.$watch(
            function(scope) {
                // watch the 'compile' expression for changes
                return scope.$eval(attrs.compileBind);
            },
            function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
            }
        );
    };
}]);