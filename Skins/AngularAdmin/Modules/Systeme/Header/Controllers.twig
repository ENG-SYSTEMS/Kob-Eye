{% for c in controllers %}
    {% if c.overload %}
    /**** OVERLOAD CONTROLLER  ****/
        {{ include(template_from_string(module(c.overload))) }}
    {% elseif not c.store %}
        app.controller('{{ c.name }}Ctrl', function() {});
    {% else %}
    /**** LIST CONTROLLER  ****/
    app.controller('{{ c.name }}Ctrl', function($injector,$location, $scope, $rootScope,$http,{{ c.identifier }}Store{% for parent in c.parentelements %},{{ parent.objectModule }}{{ parent.objectName }}Store{% endfor %}{% for child in c.childrenelements %},{{ child.objectModule }}{{ child.objectName }}Store{% endfor %}) {
        //test du store
        $scope.{{ c.identifier }} = {
            data: {{ c.identifier }}Store.data.default,
            store: {{ c.identifier }}Store,
            filter: {{ c.identifier }}Store.filter.default,
            currentPage: {{ c.identifier }}Store.currentPage.default,
            itemsPerPage: {{ c.identifier }}Store.itemsPerPage,
            selected: {
                selectall: false
            }
        }

        //acces aux stores parents
        {% for parent in c.parentelements %}
            $scope.{{ parent.objectModule }}{{ parent.objectName }}Store = {{ parent.objectModule }}{{ parent.objectName }}Store;
            $scope.{{ parent.objectModule }}{{ parent.objectName }}Store.setFilters('{{ parent.filter }}','select');
            $scope.{{ parent.objectModule }}{{ parent.objectName }}Store.getData(1,'select');
        {% endfor %}

        //acces aux stores enfants
        {% for child in c.childrenelements %}
            $scope.{{ child.objectModule }}{{ child.objectName }}Select = {
                data: {{ child.objectModule }}{{ child.objectName }}Store.data.select,
                store: {{ child.objectModule }}{{ child.objectName }}Store,
                filter: {{ child.objectModule }}{{ child.objectName }}Store.filter.select,
                currentPage: {{ child.objectModule }}{{ child.objectName }}Store.currentPage.select,
                itemsPerPage: {{ child.objectModule }}{{ child.objectName }}Store.itemsPerPage,
                selected: {
                    selectall: false
                }
            }
            {{ child.objectModule }}{{ child.objectName }}Store.resetQuery('select');
            {{ child.objectModule }}{{ child.objectName }}Store.getData(1,'select');
        {% endfor %}

        //mass delete
        //sélection
        $scope.$watch('{{ c.identifier }}.selected.selectall', function() {
            if ($scope.{{ c.identifier }}.selected.selectall){
                var data = {{ c.identifier }}Store.data['default'];
                for (var i in data) {
                    $scope.{{ c.identifier }}.selected[data[i].id] = true;
                }
            }else{
            $scope.{{ c.identifier }}.selected = {};
            }
        });

        //call function
        $scope.{{ c.identifier }}callFunction = function (obj,name,title){
            console.log('callfunction ',obj.id,title);

            $scope.{{ c.identifier }}function = {
                title: title,
                loaded: false,
                name: name,
                url: '/{{ c.module }}/{{ c.objecttype }}/'+obj.id+'/'+name+'.htm?rand='+new Date().getTime()
            };

            {{ c.identifier }}Store.getOneData(obj.id,false).then(function (data) {
                $scope.modalObj = data;
                console.log('function '+title+' obj',$scope.modalObj);
            });

            $("#modalfunction-{{ c.identifier }}").modal();
            new Spinner({color:'#ff0000', lines: 12}).spin($('#spinload'));
        }

        //select Delete
        $scope.{{ c.identifier }}selectDelete = function () {
            //nettoyage de la selection
            var sel= [];
            for (var i in $scope.{{ c.identifier }}.selected){
                if ($scope.{{ c.identifier }}.selected[i]&&parseInt(i)>0)sel.push(i);
            }
            console.log('Suppression de la sélection ',sel);
            swal({
                    title: "Êtes vous sûr de vouloir supprimer les "+sel.length+" éléments ?",
                    text: "Cette suppression sera définitive. ",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: "btn-danger",
                    cancelButtonText: "Annuler",
                    confirmButtonText: "Oui, supprimer !",
                    closeOnConfirm: true
                },
                function(){
                    $http.post('/{{ c.module }}/{{ c.objecttype }}/massDelete.json',sel)
                    .success(function(data) {
                        console.log('store > {{ c.module }}/{{ c.objecttype }} > deleted ', data);
                        {{ c.identifier }}Store.refresh('default');
                        $scope.{{ c.identifier }}.selected = {};
                    });
                });
        }

        //recherche watcher
        $scope.$watch('{{ c.identifier }}.filter', function() {
            //on lance la recherche depuis le store
            {{ c.identifier }}Store.setFilters($scope.{{ c.identifier }}.filter,'default',true);
            $scope.{{ c.identifier }}.currentPage=1;
        });
        $scope.$watch('{{ c.identifier }}.currentPage', function() {
            {{ c.identifier }}Store.setPage($scope.{{ c.identifier }}.currentPage,'default');
        });
        $scope.setFilter = function (filter){
            {{ c.identifier }}Store.setFilters(filter,'default',false);
        }
        $scope.{{ c.identifier }}add = function (){
            console.log('add {{ c.objecttype }}');
            $scope.modalObj = {{ c.identifier }}Store.getNewData();
            $scope.modalObj.title = 'Ajouter un nouveau {{ c.description }}';
            $("#modal-{{ c.identifier }}").modal();
        }
        $scope.{{ c.identifier }}modify = function (obj){
            {{ c.identifier }}Store.getOneData(obj.id,'default',false).then(function (data) {
                $scope.modalObj = data;
                $scope.modalObj.title = 'Modifier {{ c.description }} '+data.label;
                console.log('edit obj',$scope.modalObj);
            });
            $("#modal-{{ c.identifier }}").modal();
        }
        $scope.{{ c.identifier }}export = function (obj){
            {{ c.identifier }}Store.export('default');
        }
        $scope.{{ c.identifier }}modalSave = function (){
            console.log('save ',$scope.modalObj);
            {{ c.identifier }}Store.saveData($scope.modalObj,'default').then(function (data) {
                if (data.success){
                    $scope.modalObj = data.data;
                    $("#modal-{{ c.identifier }}").modal('toggle');
                    {{ c.identifier }}Store.refresh('default');
                }else {
                    //gestion des erreurs
                    $scope.modalObj.errors = data.errors;
                    $scope.modalObj.fieldErrors = [];
                    for (var e in data.errors) {
                        $scope.modalObj.fieldErrors.push(data.errors[e].Prop);
                    }
                    console.log('tab field error',$scope.modalObj.fieldErrors);
                }
                console.log('save obj',data);
            });
        }
        $scope.{{ c.identifier }}delete = function (item){
            console.log('edit ',item);
            swal({
                    title: "Êtes vous sûr de vouloir supprimer "+item["label"]+"?",
                    text: "Cette suppression sera définitive. ",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonClass: "btn-danger",
                    cancelButtonText: "Annuler",
                    confirmButtonText: "Oui, supprimer !",
                    closeOnConfirm: true
                },
                function(){
                    $http.get('/{{ c.module }}/{{ c.objecttype }}/'+item.id+'/Delete.json')
                        .success(function(data) {
                            console.log('store > {{ c.module }}/{{ c.objecttype }} > deleted '+item.id, data);
                            {{ c.identifier }}Store.refresh('default');
                        });
                });
        }
        $scope.getSelectData = function (store,search){
            console.log('get select data',store,search);
            return $injector.get(store).getDataFilter(search,'form');
        }
    });

    /**** FICHE CONTROLLER ****/
    app.controller('{{ c.name }}FicheCtrl', function($injector,NgMap,$location, $scope, $rootScope, $routeParams,$http,{{ c.identifier }}Store{% for child in c.childrenelements %},{{ child.objectModule }}{{ child.objectName }}Store{% endfor %}) {

        //récupération des données du store.
        {{ c.identifier }}Store.getOneData($routeParams.id,'default',true).then(function (data){
            console.log('retour chargement one data',data);
            $scope.obj = data;
            $scope.callFunction = function (obj,name,title){
                console.log('callfunction ',obj.id,title);

                $scope.function = {
                    title: title,
                    loaded: false,
                    name: name,
                    url: '/{{ c.module }}/{{ c.objecttype }}/'+obj.id+'/'+name+'.htm?rand='+new Date().getTime()
                };

                {{ c.identifier }}Store.getOneData(obj.id,false).then(function (data) {
                    $scope.modalObj = data;

                    console.log('function '+title+' obj',$scope.modalObj);
                });
                $("#modalfunction-{{ c.identifier }}").modal();
                new Spinner({color:'#ff0000', lines: 12}).spin($('#spinload'));
            }
            $scope.modify = function (obj){

                console.log('edit ',obj.id);
                {{ c.identifier }}Store.getOneData(obj.id,false).then(function (data) {
                    $scope.obj = $scope.modalObj = data;
                    $scope.modalObj.title = 'Modifier {{ c.description }} '+data.label;
                    console.log('edit obj',$scope.modalObj);
                });
                $("#modalfiche-{{ c.identifier }}").modal();
            }
            $scope.modalSave = function (){
                console.log('save ',$scope.modalObj);
                {{ c.identifier }}Store.saveData($scope.modalObj).then(function (data) {
                    if (data.success){
                        $scope.modalObj= $scope.obj = data.data;
                        $("#modalfiche-{{ c.identifier }}").modal('toggle');
                        {{ c.identifier }}Store.refresh();
                    }else {
                        //gestion des erreurs
                        $scope.modalObj.errors = data.errors;
                        $scope.modalObj.fieldErrors = [];
                        for (var e in data.errors) {
                            $scope.modalObj.fieldErrors.push(data.errors[e].Prop);
                        }
                        console.log('tab field error',$scope.modalObj.fieldErrors);
                    }
                    console.log('save obj',data);
                });
            }
            $scope.delete = function (item){
                console.log('edit ',item);
                swal({
                        title: "Êtes vous sûr de vouloir supprimer "+item["label"]+"?",
                        text: "Cette suppression sera définitive. ",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: "btn-danger",
                        cancelButtonText: "Annuler",
                        confirmButtonText: "Oui, supprimer !",
                        closeOnConfirm: true
                    },
                    function(){
                        $http.get('/{{ c.module }}/{{ c.objecttype }}/'+item.id+'/Delete.json')
                        .success(function(data) {
                            console.log('store > {{ c.module }}/{{ c.objecttype }} > deleted '+item.id, data);
                            {{ c.identifier }}Store.refresh();
                            //redirection à la liste
                            $location.path('{{ c.url }}');
                    });
                });
            }
            {% for child in c.childrenelements %}
                //FORMULAIRE SELECT
                $scope.{{ child.objectModule }}{{ child.objectName }}Select = {
                    data : {{ child.objectModule }}{{ child.objectName }}Store.data.select,
                    store: {{ child.objectModule }}{{ child.objectName }}Store,
                    filter: '',
                    currentPage: {{ c.identifier }}Store.currentPage.select,
                    itemsPerPage: {{ c.identifier }}Store.itemsPerPage,
                    selected: {
                        selectall: false
                    }
                }
                console.log('>>>>>>>>>>>>>>> refresh {{ child.objectModule }}{{ child.objectName }}Select');
                {{ child.objectModule }}{{ child.objectName }}Store.refresh('select');
                $scope.$watch('{{ child.objectModule }}{{ child.objectName }}Select.filter', function() {
                    //on lance la recherche depuis le store
                    {{ child.objectModule }}{{ child.objectName }}Store.setFilters($scope.{{ child.objectModule }}{{ child.objectName }}Select.filter,'select');
                });
                $scope.$watch('{{ child.objectModule }}{{ child.objectName }}Select.currentPage', function() {
                    {{ child.objectModule }}{{ child.objectName }}Store.setPage($scope.{{ child.objectModule }}{{ child.objectName }}Select.currentPage,'select');
                });

                //FORMULAIRE CHILDREN
                $scope.{{ child.objectModule }}{{ child.objectName }} = {
                    data : {{ child.objectModule }}{{ child.objectName }}Store.data.children,
                    store: {{ child.objectModule }}{{ child.objectName }}Store,
                    filter: '',
                    currentPage: {{ c.identifier }}Store.currentPage.children,
                    itemsPerPage: {{ c.identifier }}Store.itemsPerPage,
                    selected: {
                        selectall: false
                    }
                }
                $scope.{{ child.objectModule }}{{ child.objectName }}.store.refresh('children');

                //sélection
                $scope.$watch('{{ child.objectModule }}{{ child.objectName }}.selected.selectall', function() {
                    if ($scope.{{ child.objectModule }}{{ child.objectName }}.selected.selectall){
                        var data = {{ child.objectModule }}{{ child.objectName }}Store.data.children;
                        console.log('tous le store',data);
                        for (var i in data) {
                            $scope.{{ child.objectModule }}{{ child.objectName }}.selected[data[i].id] = true;
                        }
                    }else{
                        $scope.{{ child.objectModule }}{{ child.objectName }}.selected = {selectall:false};
                    }
                });

                //call function
                $scope.{{ child.objectModule }}{{ child.objectName }}callFunction = function (obj,name,title){
                    console.log('callfunction ',obj.id,title);

                    $scope.{{ child.objectModule }}{{ child.objectName }}function = {
                        title: title,
                        loaded: false,
                        name: name,
                        url: '/{{ child.objectModule }}/{{ child.objectName }}/'+obj.id+'/'+name+'.htm?rand='+new Date().getTime()
                    };

                    {{ child.objectModule }}{{ child.objectName }}Store.getOneData(obj.id,false).then(function (data) {
                        $scope.modalObj = data;
                        console.log('function '+title+' obj',$scope.modalObj);
                    });

                    $("#modalfunction-{{ child.objectModule }}{{ child.objectName }}").modal();
                    new Spinner({color:'#ff0000', lines: 12}).spin($('#spinload'));
                }

                //mass delete
                $scope.{{ child.objectModule }}{{ child.objectName }}selectDelete = function () {
                    //nettoyage de la selection
                    var sel= [];
                    for (var i in $scope.{{ child.objectModule }}{{ child.objectName }}selected){
                        if ($scope.{{ child.objectModule }}{{ child.objectName }}selected[i]&&parseInt(i)>0)sel.push(i);
                    }
                    console.log('Suppression de la sélection ',sel);
                    swal({
                            title: "Êtes vous sûr de vouloir supprimer les "+sel.length+" éléments ?",
                            text: "Cette suppression sera définitive. ",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonClass: "btn-danger",
                            cancelButtonText: "Annuler",
                            confirmButtonText: "Oui, supprimer !",
                            closeOnConfirm: true
                        },
                        function(){
                            $http.post('/{{ child.objectModule }}/{{ child.objectName }}/massDelete.json',sel)
                            .success(function(data) {
                                console.log('store > {{ child.objectModule }} {{ child.objectName }} > deleted ', data);
                                {{ child.objectModule }}{{ child.objectName }}Store.refresh('children');
                                $scope.{{ child.objectModule }}{{ child.objectName }}selected = {};
                        });
                    });
                }
                $scope.$watch('{{ child.objectModule }}{{ child.objectName }}.filter', function() {
                    //on lance la recherche depuis le store
                    {{ child.objectModule }}{{ child.objectName }}Store.setFilters($scope.{{ child.objectModule }}{{ child.objectName }}.filter,'children');
                });
                $scope.$watch('{{ child.objectModule }}{{ child.objectName }}.currentPage', function() {
                    {{ child.objectModule }}{{ child.objectName }}Store.setPage($scope.{{ child.objectModule }}{{ child.objectName }}.currentPage,'children');
                });
                $scope.{{ child.objectModule }}{{ child.objectName }}add = function (){
                    console.log('child add {{ child.objectName }}');
                    $scope.modalObj = {{ child.objectModule }}{{ child.objectName }}Store.getNewData();
                    $scope.modalObj.{{ child.name }} = $scope.obj.id;
                    $scope.modalObj.{{ child.name }}label = $scope.obj.label;
                    $scope.modalObj.title = 'Ajouter un nouveau {{ child.objectDescription }}';
                    $("#modal-{{ child.objectModule }}{{ child.objectName }}").modal();
                }
                $scope.{{ child.objectModule }}{{ child.objectName }}modify = function (obj){
                    console.log('edit ',obj.id);
                    {{ child.objectModule }}{{ child.objectName }}Store.getOneData(obj.id,false).then(function (data) {
                        $scope.modalObj = data;
                        $scope.modalObj.{{ child.name }} = $scope.obj.id;
                        $scope.modalObj.{{ child.name }}label = $scope.obj.label;
                        $scope.modalObj.title = 'Modifier {{ child.objectDescription }} '+data.label;
                        console.log('edit obj',$scope.modalObj);
                    });
                    $("#modal-{{ child.objectModule }}{{ child.objectName }}").modal();
                }
                $scope.{{ child.objectModule }}{{ child.objectName }}export = function (obj){
                    console.log('export {{ child.objectModule }}{{ child.objectName }}');
                    {{ child.objectModule }}{{ child.objectName }}Store.export('children');
                }
                $scope.{{ child.objectModule }}{{ child.objectName }}modalSave = function (){
                    console.log('children > save {{ child.objectModule }}{{ child.objectName }}',$scope.modalObj);
                    {{ child.objectModule }}{{ child.objectName }}Store.saveData($scope.modalObj).then(function (data) {
                        if (data.success){
                            $scope.modalObj = data.data;
                            $("#modal-{{ child.objectModule }}{{ child.objectName }}").modal('toggle');
                            {{ child.objectModule }}{{ child.objectName }}Store.refresh('children');
                        }else {
                            //gestion des erreurs
                            $scope.modalObj.errors = data.errors;
                            $scope.modalObj.fieldErrors = [];
                            for (var e in data.errors) {
                                $scope.modalObj.fieldErrors.push(data.errors[e].Prop);
                            }
                            console.log('tab field error',$scope.modalObj.fieldErrors);
                        }
                        console.log('save obj {{ child.objectModule }}{{ child.objectName }}',data);
                    });
                }
                $scope.getSelectData = function (store,search){
                    console.log('get select data',store,search);
                    return $injector.get(store).getDataFilter(search,'form');
                }
                $scope.{{ child.objectModule }}{{ child.objectName }}delete = function (item){
                    console.log('edit ',item);
                    swal({
                            title: "Êtes vous sûr de vouloir supprimer {{ child.objectDescription }} "+item["label"]+"?",
                            text: "Cette suppression sera définitive. ",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonClass: "btn-danger",
                            cancelButtonText: "Annuler",
                            confirmButtonText: "Oui, supprimer !",
                            closeOnConfirm: true
                        },
                        function(){
                            $http.get('/{{ child.objectModule }}/{{ child.objectName }}/'+item.id+'/Delete.json')
                                .success(function(data) {
                                    console.log('store > {{ child.objectModule }}/{{ child.objectName }} > deleted '+item.id, data);
                                    {{ child.objectModule }}{{ child.objectName }}Store.refresh('children');
                            });
                    });
                }
            {% endfor %}

            //gestion des widget
            {% for i in c.Interfaces %}
                {% for w in i %}
                    {% if w.type == 'GeolocIP' %}
                        console.log('>>>> interface {{ w.type }}');
                        NgMap.getMap().then(function(map) {
                            //géolocalisation d'une ip
                            $http({
                                method: 'GET',
                                url: 'https://freegeoip.net/json/'+$scope.obj.{{ w.field }}
                            }).then(function successCallback(response) {
                                console.log('GEOLOCIP > response ',response,'http://freegeoip.net/json/'+$scope.obj.{{ w.field }});
                                //clearMarker
                                if (map.markers)
                                    for (var i=0; i< map.markers.length;i++) {
                                        map.markers[i].setMap(null);
                                    }
                                else map.markers = [];
                                //setcenter
                                map.setCenter(new google.maps.LatLng(response.data.latitude, response.data.longitude));
                                //add marker
                                var marker = new google.maps.Marker({
                                    position: new google.maps.LatLng(response.data.latitude, response.data.longitude),
                                    map: map,
                                    title: $scope.obj.label
                                });
                                map.markers.push(marker);
                            }, function errorCallback(response) {
                                console.log('GEOLOCIP > error ',response);
                            });
                        });
                    {% endif %}
                {% endfor %}
            {% endfor %}

            $scope.show = true;
        });
        });
    {% endif %}
{% endfor %}
