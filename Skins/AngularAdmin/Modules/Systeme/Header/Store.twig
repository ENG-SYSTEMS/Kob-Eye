{% for key,st in stores %}
    app.service('{{ key }}', function ($http,$q,$timeout{% for child in st.childrenelements %},{{ child.identifier }}Store{% endfor %}) {
        var {{ st.identifier }}Store = {'default': [], select: [], children: [], form: [] , parentselect: [], link : [] },
            contexts = [],
            currentPage = {},
            pageLoaded = {},
            sort = {},
            total = {},
            pageLength = 15,

            timer = {},
            query = {},
            busy = {},
            filters = {};

        //init filters
        initContext('default');
        initContext('select');
        initContext('children');
        initContext('form');
        initContext('parentselect');
        initContext('link');

        return {
            getOneData: getOneData,
            addOneData: addOneData,
            updateOneData: updateOneData,
            deleteOneData: deleteOneData,
            getData: getData,
            getNewData: getNewData,
            saveData: saveData,
            getTotal: getTotal,
            export: exportData,
            setPage: setPage,
            setFilters: setFilters,
            setOptionFilter: setOptionFilter,
            setOptionsFilters: setOptionsFilters,
            setGlobalFilter: setGlobalFilter,
            getQueryFilter: getQueryFilter,
            getFilters: getFilters,
            resetFilters: resetFilters,
            getPageLength: getPageLength,
            setPageLength: setPageLength,
            getCurrentPage: getCurrentPage,
            currentPage: currentPage,
            itemsPerPage: pageLength,
            getDataFilter: getDataFilter,
            refresh: refresh,
            filter: filters,
            total: total,
            currentPage: currentPage,
            initContext: initContext,
            resetQuery: resetQuery,
            setQuery: setQuery,
            getQuery: getQuery,
            query: query,
            loadRecursivChildren:loadRecursivChildren,
            data:{{ st.identifier }}Store
        };
        function initContext(context) {
            {{ st.identifier }}Store[context] = [];
            total[context] = 0;
            timer[context] = 0;
            busy[context] = 0;
            sort[context] = [];
            resetFilters(context);
            currentPage[context] = 1;
            resetQuery(context);
            contexts.push(context);
         }
        function resetQuery(context = 'default') {
            pageLoaded[context] = 0;
            query[context] = '/{{ st.module }}/{{ st.objecttype }}';
            console.log(context+' >> {{ st.identifier }} >> resetquery > '+query[context]);
            return query[context];
        }

        function setQuery(q,context = 'default') {
            if (!query[context]) initContext(context);
            console.log(context+' >> {{ st.identifier }} >> setquery >> '+q);
            pageLoaded[context] = 0;
            query[context] = q;
            resetFilters(context);
        }
        function getQuery(context = 'default'){
            if (!query[context]) initContext(context);
            return query[context];
        }
        function setPageLength(pl,context = 'default') {
            if (pageLength==pl)return false;
            console.log(context+' >> {{ st.identifier }} >> pageLength > '+pl);
            pageLength = pl;
            pageLoaded[context]--;
            setPage(1,context);
        }
        function getPageLength() {
            return pageLength;
        }
        function getTotal(context = 'default') {
            return total[context];
        }
        function purgeStore(context = 'default'){
            if (Array.isArray({{ st.identifier }}Store[context]))
                {{ st.identifier }}Store[context].splice(0,{{ st.identifier }}Store[context].length);
        }
        /**
        * Définition de la page en cours
        */
        function setPage(page,context = 'default'){
            getData(page,context);
        }
        function getCurrentPage(context = 'default'){
            return currentPage[context];
        }
        /**
        * Définition du filtre
        **/
        function refresh(context = 'default'){
            if (context == 'all') {
                for (var c in contexts){
                    pageLoaded[contexts[c]]--;
                    getData(currentPage[contexts[c]], contexts[c]);
                }
            }else{
                pageLoaded[context]--;
                getData(currentPage[context], context);
            }
        }

        /**
        * Mise à jour de toutes les option de filtre (xxx = yyyy & xxx= yyyy)
        **/
        function setOptionsFilters(filter,context='default'){
            if (filters[context]==undefined) initContext(context);
            filters[context].options = [];
            var opt = filter.split(/&/);
            if (opt.length>0&&opt[0] !=''){
                for (var i in opt) {
                    setOptionFilter(opt[i],context)
                }
            }else{
                filters[context].options = [];
            }
            pageLoaded[context]=0;
            return true;
        }
        /**
        * Reset du filtre
        **/
        function resetFilters(context='default'){
            filters[context] = {
                global: '',
                options: []
            };
            pageLoaded[context]=0;
        }
        /**
        * Mise à jour ou ajout d'une option de filtre (xxx = yyyy)
        **/
        function setOptionFilter(filter='',context='default'){
            if (filters[context]==undefined) initContext(context);
            var opt = filter.match(/^(.*?)([=><!~]{1,2}?)(.*?)$/);
            for (var i in filters[context].options) {
                if (filters[context].options[i].name == opt[1] && filters[context].options[i].operator == opt[2]){
                    filters[context].options[i] = {
                        name: opt[1],
                        operator: opt[2],
                        value: opt[3]
                    };
                    return true;
                }
            }
            filters[context].options.push({
                name: opt[1],
                operator: opt[2],
                value: opt[3]
            });
            pageLoaded[context]=0;
            return true;
        }
        /**
        * Définition du filtre global ( ~xxx )
        **/
        function setGlobalFilter(filter,context='default'){
            if (filters[context]==undefined) initContext(context);
            if (filter==filters[context].global) return;
            filters[context].global = filter;
            pageLoaded[context] = 0;
        }
        /**
        * Définition du filtre
        **/
        function setFilters(filter,context='default'){
            if (filters[context]==undefined) initContext(context);
            if (filter==filters[context]) return;
            var tmp = {
                global: '',
                options:[]
            }
            //test des égalités
            if (!filter.match(/[=><!]{1,2}/g)){
                //cas global
                tmp.global = filter;
            }else{
                var fi = filter.split('&');
                for (var i in fi){
                    if (!fi[i].match(/[=><!]{1,2}/g)){
                        //cas global
                        tmp.global = filter;
                    }else{
                        //cas option
                        var opt = fi[i].match(/^(.*?)([=><!]{1,2}?)(.*?)$/);
                        tmp.options.push({
                            name: opt[1],
                            operator: opt[2],
                            value: opt[3],
                        });
                    }
                }
            }
            filters[context] = tmp;
            console.log(context+' > {{ st.identifier }} > setFilters ',tmp);
            pageLoaded[context]=0;
        }
        /**
        * Creation de la chaine de recherche
        */
        function getQueryFilter(context = 'default') {
            if (!filters[context]) return '';
            var query = '';
            if (filters[context].global)
                query += '~'+filters[context].global;
            for (var i in filters[context].options) {
                query+='&'+filters[context].options[i].name+filters[context].options[i].operator+filters[context].options[i].value;
            }
            console.log(context+' > {{ st.identifier }} > getQueryFilter ',query);
            return query;
        }
        /**
        * Récupération du filtre en cours
        **/
        function getFilters(context = 'default'){
            if (filters[context] == undefined) initContext(context);
            var out  = filters[context];
            return out;
        }
        /**
        * Test if this id already exists
        */
        function alreadyExists(id,context = 'default'){
            for (var i in {{ st.identifier }}Store[context]){
                if ({{ st.identifier }}Store[context][i].Id==id){
                    return true;
                }
            }
            return false;
        }
        /**
        * exportData
        * export des données en fichier csv
        */
        function exportData(context = 'default'){
            window.open(query[context]+'/Export.csv','_blank');
            console.log('store > {{ key }} > export '+query[context]);
        }
        /**
        * SaveData
        * Envoie des données vers le serveur et gestion des erreurs
        */
        function saveData(obj){
            return $q(function(resolve, reject) {
                var q = (obj.id > 0) ? '/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/Save.json' :'/{{ st.module }}/{{ st.objecttype }}/Save.json'
                $http.post(q,obj)
                    .success(function(data) {
                        console.log('store > {{ key }} > save success '+obj.id, data);
                        {% if not st.logEvent %}
                        refresh('all');
                        {% endif %}
                        resolve(data);
                });
            });
        }
        /**
        * Return new data with default values
        * Return Promise
        */
        function getNewData() {
            console.log('new data {{ st.newData }}');
            return {{ st.newData | raw }};
        }
        /**
        * Look for specific id data into the store
        * Return Promise
        */
        function getOneData(id,context = 'default',full = true) {
            return $q(function(resolve, reject) {
                console.log(context+' >> store > {{ st.identifier }} > getOneData '+id,id);
                var idStore = -1;
                if (context != 'all'){
                    //recherche dans le contexte courrant
                    for (var i in {{ st.identifier }}Store[context]){
                        if ({{ st.identifier }}Store[context][i].id==id){
                            idStore = i;
                            resolve({{ st.identifier }}Store[context][i]);
                            console.log(context+' >> store > {{ st.identifier }} > getOneData '+id+' > store local');
                            if (!{{ st.identifier }}Store[context][i]._full){
                                /*loadChildren({{ st.identifier }}Store[context][i]).then(function (obj){
                                    {{ st.identifier }}Store[context][idStore] = unescapeData(updateRecord({{ st.identifier }}Store[context][idStore],obj));
                                    if (obj._full){
                                        resolve(obj);
                                    }
                                });*/
                            }
                        }
                    }
                    if (idStore==-1){
                        //recherche dans tous les contextes
                        for (var c in contexts){
                            for (var i in {{ st.identifier }}Store[contexts[c]]){
                                if ({{ st.identifier }}Store[contexts[c]][i].id == id){
                                    if ({{ st.identifier }}Store[context] ==undefined) {{ st.identifier }}Store[context] = [];
                                    idStore = {{ st.identifier }}Store[context].length;
                                    {{ st.identifier }}Store[context].push({{ st.identifier }}Store[contexts[c]][i]);
                                    resolve({{ st.identifier }}Store[context][idStore]);
                                    if (!{{ st.identifier }}Store[context][idStore]._full){
                                        loadChildren({{ st.identifier }}Store[context][idStore]).then(function (obj){
                                            {{ st.identifier }}Store[context][idStore] = unescapeData(updateRecord({{ st.identifier }}Store[context][idStore],obj));
                                            if (obj._full){
                                                resolve(obj);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                //si store pas chargé ou introuvable
                $http.get('/{{ st.module }}/{{ st.objecttype }}/'+id+'/getOneData.json')
                    .success(function(data) {
                        data = unescapeData(data);
                        console.log(context+' >> store > {{ key }} > load success '+id, data);
                        //mise à jour du store avec infos completes
                        if (context == 'all') {
                            for (var c in contexts){
                                for (var i in {{ st.identifier }}Store[contexts[c]]){
                                    if ({{ st.identifier }}Store[contexts[c]][i].id == id){
                                        {{ st.identifier }}Store[contexts[c]][i] = updateRecord({{ st.identifier }}Store[contexts[c]][i],data);
                                    }
                                }
                            }
                            resolve({{ st.identifier }}Store[contexts[c]][i]);
                        }else{
                            if (idStore>-1){
                                //mise à jour si existant
                                data._full = true;
                                {{ st.identifier }}Store[context][idStore] = updateRecord({{ st.identifier }}Store[context][idStore],data);
                                console.log(context+' >> store > {{ key }} > getOneData '+id+' > update local store');
                            }else {
                                //sinon on ajoute
                                if ({{ st.identifier }}Store[context] == undefined)
                                    {{ st.identifier }}Store[context] = [];
                                idStore = {{ st.identifier }}Store[context].length;
                                {{ st.identifier }}Store[context].push(data);
                                console.log(context+' >> store > {{ key }} > getOneData '+id+' ajout dans le store');
                            }
                            //on charge les enfants uniquement si param full
                            if (full){
                                loadChildren(data).then(function (obj){
                                    if (idStore>-1){
                                        obj._full = true;
                                        {{ st.identifier }}Store[context][idStore] = updateRecord({{ st.identifier }}Store[context][idStore],obj);
                                    }
                                    resolve({{ st.identifier }}Store[context][idStore]);
                                });
                            }else{
                                console.log(context+' >> store > {{ key }} > getOneData '+id+' retour',idStore,{{ st.identifier }}Store[context][idStore]);
                                resolve({{ st.identifier }}Store[context][idStore]);
                            }
                        }
                });
            });
        }
        /**
        * supprime les échappements
        */
        function unescapeData (obj){
            for (var i in obj){
                if (typeof obj[i] == "string"){
                    obj[i] = obj[i].replace(/\\\\n/g,'\n');
                    obj[i] = obj[i].replace(/\\\\r/g,'');

                    var map = {
                        '&amp;': '&',
                        '&lt;': '<',
                        '&gt;': '>',
                        '&quot;': '"',
                        '&#039;': "'"
                    };
                    obj[i] = obj[i].replace(/&amp;|&lt;|&gt;|&quot;|&#039;/g, function(m) {return map[m];});
                    obj[i] = obj[i].replace(/&amp;|&lt;|&gt;|&quot;|&#039;/g, function(m) {return map[m];});
                }
            }
            return obj;
        }
        /**
        * updateRecord
        * Mise à jour des données d'une ligne
        **/
        function updateRecord(c,n){
            for (var f in n){
                c[f] = n[f];
            }
            return c;
        }

        /**
         * updateOneData
         * Met à jour une donnée dans un contexte ou l'ensemble des contexte possédant cette donnée
         */
        function updateOneData(id,data,context = 'default'){
            if (context == 'all') {
                for (var c in contexts){
                    for (var i in {{ st.identifier }}Store[contexts[c]]){
                        if ({{ st.identifier }}Store[contexts[c]][i].id == id){
                            {{ st.identifier }}Store[contexts[c]][i] = updateRecord({{ st.identifier }}Store[contexts[c]][i],unescapeData(data));
                        }
                    }
                }
            }else{
                for (var i in {{ st.identifier }}Store[context]){
                    if ({{ st.identifier }}Store[context][i].id==id){
                        {{ st.identifier }}Store[context][i] = updateRecord({{ st.identifier }}Store[context][i],unescapeData(data));
                    }
                }
            }
        }

        /**
        * addOneData
        * Met à jour une donnée dans un contexte ou l'ensemble des contexte possédant cette donnée
        */
        function addOneData(id,data,context = 'default'){
            if (context == 'all') {
                for (var c in contexts){
                    var check = false;
                    if ({{ st.identifier }}Store[contexts[c]]){
                        for(var d in {{ st.identifier }}Store[contexts[c]]){
                            var temp = {{ st.identifier }}Store[contexts[c]][d];
                            if(temp.id == id) {
                                check = true;
                                break;
                            }
                        }
                        if(!check){
                            //test de la query
                            {{ st.identifier }}Store[contexts[c]].unshift(data);
                            total[contexts[c]]=parseInt(total[contexts[c]])+1;
                        }
                    }
                }
            }else{
                if ({{ st.identifier }}Store[context]){
                    for(var d in {{ st.identifier }}Store[context]){
                        var temp = {{ st.identifier }}Store[context][d];
                        if(temp.id == id) {
                            check = true;
                            break;
                        }
                    }
                    if(!check){
                        {{ st.identifier }}Store[context].unshift(unescapeData(data));
                        total[context]=parseInt(total[context])+1;
                    }
                }
            }
        }

        /**
         * delete
         * Supprime une donnée dasn les store et envoie la requete au serveur
         */
        function deleteOneData (id,context = 'default',onlyStore = false){
            if (context == 'all') {
                for (var c in contexts){
                    for (var i in {{ st.identifier }}Store[contexts[c]]){
                        if ({{ st.identifier }}Store[contexts[c]][i].id == id){
                            {{ st.identifier }}Store[contexts[c]].splice(i,1);
                            total[contexts[c]]=parseInt(total[contexts[c]])-1;
                            break;
                        }
                    }
                }
            }else{
                for (var i in {{ st.identifier }}Store[context]){
                    if ({{ st.identifier }}Store[context][i].id==id){
                        {{ st.identifier }}Store[context].splice(i,1);
                        total[context]=parseInt(total[context])-1;
                        break;
                    }
                }
            }
            if (!onlyStore)
                $http.get('/{{ st.module }}/{{ st.objecttype }}/'+id+'/Delete.json')
                    .success(function(data) {
                        console.log('store > {{ st.module }}/{{ st.objecttype }} > deleted '+id, data);
                    });
        }
        /**
        * Get data for combo component
        */
        function getDataFilter (filter,context='default') {
            console.log(context+' getdatafilter >> {{ st.module }}/{{ st.objecttype }}  ',filter);
            setFilters(filter,context,true,true);
            return getData(1,context);
        }
        /**
        * Load more data base on page
        */
        function getData(page,context='default') {
            if (context=='link') console.trace();
            var tmpquery = getQuery(context);
            var tmpfilters = getQueryFilter(context);
            //create new context
            if (page<1||page==undefined) page=1;
            //si occupé
            if (busy[context]) {
                //si meme requete et meme filtre
                if (busy[context].query == tmpquery && busy[context].filter == tmpfilters && page == busy[context].page){
                    //on renvoie le promise
                    console.log('STOP LIST BUSY ',busy[context].query, '==' ,tmpquery, '&&', busy[context].filter, '==' ,tmpfilters, '&&' ,page, '==' ,busy[context].page,'-----',busy[context]);
                    //return busy[context].promise;
                    return $q(function(resolve, reject) {
                        resolve({{ st.identifier }}Store[context]);
                    });
                }else{
                    //on annule la requete
                    busy[context].promise.defer().resolve();
                    busy[context] = false;
                }
            }
            return $q(function(resolve, reject) {
                //console.trace();
                console.log(context+' >> store > {{ key }} > getData >> page '+page+' / '+pageLoaded[context]);
                if (page!=pageLoaded[context]){
                    var canceler = $q.defer();
                    busy[context]={
                        promise: $q,
                        query: tmpquery,
                        filter: tmpfilters,
                        page: page
                    };
                    $http.get(
                        tmpquery+'/getData.json',
                        {
                            params: {
                                filters: tmpfilters,
                                offset: (page-1)*pageLength,
                                limit: pageLength,
                                context: context,
                                sort: JSON.stringify(sort)
                            },
                            timeout: canceler.promise
                        }).success(function(data) {
                            busy[context]=false;
                            purgeStore(context);
                            pageLoaded[context] = page;
                            currentPage[context] = page;
                            total[context] = data.total;
                            for (var i in data.data) {
                                if (!alreadyExists(data.data[i].id,context))
                                    {{ st.identifier }}Store[context].push(unescapeData(data.data[i]));
                            }
                            console.log(context+' >> store > {{ key }} > loaded success ',{{ st.identifier }}Store[context]);
                            resolve({{ st.identifier }}Store[context]);
                    });
                }else{
                    busy[context] = false;
                    resolve({{ st.identifier }}Store[context]);
                    currentPage[context] = page;
                }
            });
        }
        /**
        * Chargement des données enfants
        */
        function loadChildren(obj) {
            console.log('{{ st.identifier }} > loadchildren',obj);
            var num = {{ st.childrenelements | length }};
            return $q(function(resolve, reject) {
                {% for child in st.childrenelements %}
                    {{ child.objectModule }}{{ child.objectName }}Store.setQuery('/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/{{ child.objectName }}','children');
                    if (!obj.{{ child.objectModule }}{{ child.objectName }}) {
                       {{ child.objectModule }}{{ child.objectName }}Store.getData(1,'children').then(function (data){
                            obj.{{ child.objectModule }}{{ child.objectName }} = data;
                        });
                        num--;
                        if (num==0) resolve(obj);
                    }else{
                        {{ child.objectModule }}{{ child.objectName }}Store.data['children'] = obj.{{ child.objectName }};
                        num--;
                        if (num==0) resolve(obj);
                    }
                {% endfor %}
                if (num==0) resolve(obj);
            });
        }
        /**
        * Chargement des données récursives
        */
        function loadRecursivChildren(obj) {
                console.log('{{ st.identifier }} > load recursiv children',obj);
                return $q(function(resolve, reject) {
                setQuery('/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/{{ st.objecttype }}','recursivchildren-'+obj.id);
                if (!obj.children) {
                    getData(1,'recursivchildren-'+obj.id).then(function (data){
                        console.log('{{ st.identifier }} > load data success',data);
                        obj.children = data;
                        resolve(obj);
                    });
                    return;
                }else{
                    console.log('{{ st.identifier }} > load data already success',data);
                    data['recursivchildren-'+obj.id] = obj.{{ st.objecttype }};
                    return resolve(obj);
                }
                reject('pas récursif');
            });
        }
    }).run(function ({{ key }},$rootScope) {
        $rootScope.$on('{{ key }}',function (ev,data){
            switch (data.type){
                case 'edit':
                    //raffraichir seulement une valeur
                    {{ key }}.updateOneData(data.id,data.data,'all');
                    break;
                case 'delete':
                    //raffraichir seulement une valeur
                    {{ key }}.deleteOneData(data.id,'all',true);
                    break;
                case 'add':
                    //raffraichir seulement une valeur dans un context
                    {{ key }}.addOneData(data.id,data.data,data.context);
                    break;
            }
        });
    });
{% endfor %}
