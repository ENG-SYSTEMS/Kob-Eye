{% for key,st in stores %}
    app.service('{{ key }}', function ($http,$q,$timeout{% for child in st.childrenelements %},{{ child.identifier }}Store{% endfor %}) {
        var {{ st.identifier }}Store = {'default': [] },
            currentPage = { 'default': 1 },
            pageLoaded = { 'default': 0 },
            total = { 'default': 0 },
            pageLength = 15,
            filters = { 'default': '' },
            timer = 0,
            query = { 'default': '/{{ st.module }}/{{ st.objecttype }}' },
            busy = false;
        return {
            getOneData: getOneData,
            getData: getData,
            getNewData: getNewData,
            saveData: saveData,
            getTotal: getTotal,
            export: exportData,
            setPage: setPage,
            setFilters: setFilters,
            getFilters: getFilters,
            getPageLength: getPageLength,
            setPageLength: setPageLength,
            currentPage: currentPage,
            itemsPerPage: pageLength,
            getDataFilter: getDataFilter,
            refresh: refresh,
            filter: filters,
            resetQuery: resetQuery,
            setQuery: setQuery,
            getQuery: getQuery,
            data:{{ st.identifier }}Store
        };
        function resetQuery(context = 'default') {
            pageLoaded[context] = 0;
            query[context] = '/{{ st.module }}/{{ st.objecttype }}';
            return query[context];
        }
        function setQuery(q,context = 'default') {
            pageLoaded[context] = 0;
            query[context] = q;
        }
        function getQuery(context = 'default'){
            if (!query[context]) return resetQuery(context);
            return query[context];
        }
        function setPageLength(pl) {
            pageLength = pl;
        }
        function getPageLength() {
            return pageLength;
        }
        function getTotal(context = 'default') {
            return total['default'];
        }
        function purgeStore(context = 'default'){
            if (Array.isArray({{ st.identifier }}Store[context]))
                {{ st.identifier }}Store[context].splice(0,{{ st.identifier }}Store[context].length);
        }
        /**
        * Définition de la page en cours
        */
        function setPage(page,context = 'default'){
            getData(page,context);
        }
        /**
        * Définition du filtre
        **/
        function refresh(context = 'default'){
            pageLoaded[context]--;
            getData(currentPage[context],context);
        }
        /**
        * Définition du filtre
        **/
        function setFilters(filter,context='default',blur = false,noreload = false){
            if (filter==filters[context]) return;
            filters[context] = (blur?'~':'')+filter;
            pageLoaded[context]=0;
            //on recharge le store
            $timeout.cancel(timer);
            timer=$timeout(function (){
                getData(1,context);
            }, 300);
        }
        /**
        * Récupération du filtre en cours
        **/
        function getFilters(context = 'default'){
            return filters[context];
        }
        /**
        * Test if this id already exists
        */
        function alreadyExists(id,context = 'default'){
            for (var i in {{ st.identifier }}Store[context]){
                if ({{ st.identifier }}Store[context][i].Id==id){
                    return true;
                }
            }
            return false;
        }
        /**
        * exportData
        * export des données en fichier csv
        */
        function exportData(){
            window.open(query+'/Export.csv','_blank');
            console.log('store > {{ key }} > export '+query);
        }
        /**
        * SaveData
        * Envoie des données vers le serveur et gestion des erreurs
        */
        function saveData(obj){
            return $q(function(resolve, reject) {
                var q = (obj.id > 0) ? '/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/Save.json' :'/{{ st.module }}/{{ st.objecttype }}/Save.json'
                $http.post(q,obj)
                    .success(function(data) {
                        console.log('store > {{ key }} > save success '+obj.id, data);
                        resolve(data);
                });
            });
        }
        /**
        * Return new data with default values
        * Return Promise
        */
        function getNewData() {
            console.log('new data {{ st.newData }}');
            return {{ st.newData | raw }};
        }
        /**
        * Look for specific id data into the store
        * Return Promise
        */
        function getOneData(id,context = 'default',full = true) {
            return $q(function(resolve, reject) {
                console.log('store > {{ st.identifier }} > getOneData '+id,id);
                for (var i in {{ st.identifier }}Store[context]){
                    if ({{ st.identifier }}Store[context][i].id==id){
                        var idStore = i;
                        loadChildren({{ st.identifier }}Store[context][i]).then(function (obj){
                            {{ st.identifier }}Store[context][idStore] = obj;
                            resolve(obj);
                        });
                        continue;
                    }
                }
                //si store pas chargé ou introuvable
                $http.get('/{{ st.module }}/{{ st.objecttype }}/'+id+'/getOneData.json')
                    .success(function(data) {
                        console.log(context+' >> store > {{ key }} > load success '+id, data);
                        //on charge les enfants uniquement si param full
                        if (full)
                            loadChildren(data).then(function (obj){
                                resolve(obj);
                            });
                        else resolve(data);
                });
            });
        }
        /**
        * Get data for combo component
        */
        function getDataFilter (filter,context='default') {
            console.log(context+' getdatafilter >> {{ st.module }}/{{ st.objecttype }}  ',filter);
            setFilters(filter,context,true,true);
            return getData(1,context);
        }
        /**
        * Load more data base on page
        */
        function getData(page,context='default') {
            var tmpquery = getQuery(context);
            var tmpfilters = getFilters(context);
            //create new context
            if (!{{ st.identifier }}Store[context]){
                {{ st.identifier }}Store[context] = [];
            }
            if (page<1) page=1;
            return $q(function(resolve, reject) {
                if (busy) {
                    reject('already busy');
                    return;
                }
                console.log(context+' >> store > {{ key }} > getData '+page);
                if (!page) page = currentPage;
                else currentPage = page;
                if (page!=pageLoaded[context]){
                    busy=true;
                    $http.get(
                        tmpquery+'/getData.json',
                        {
                            params: {
                                filters: tmpfilters,
                                offset: (page-1)*pageLength,
                                limit: pageLength
                            }
                        }).success(function(data) {
                            busy=false;
                            purgeStore(context);
                            pageLoaded[context] = page;
                            total[context] = data.total;
                            for (var i in data.data) {
                                if (!alreadyExists(data.data[i].id))
                                    {{ st.identifier }}Store[context].push(data.data[i]);
                            }
                            console.log(context+' >> store > {{ key }} > loaded success ',{{ st.identifier }}Store[context]);
                            resolve({{ st.identifier }}Store[context]);
                    });
                }else resolve({{ st.identifier }}Store[context]);
        });
        }
        /**
        * Chargement des données enfants
        */
        function loadChildren(obj) {
            var num = {{ st.childrenelements | length }};
            return $q(function(resolve, reject) {
                {% for child in st.childrenelements %}
                    {{ child.objectModule }}{{ child.objectName }}Store.setQuery('/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/{{ child.objectName }}','children');
                    if (!obj.{{ child.objectName }}) {
                        obj.{{ child.objectName }} = {{ child.objectModule }}{{ child.objectName }}Store.getData(1,'children');
                        num--;
                        if (num==0) resolve(obj);
                    }else{
                        {{ child.objectModule }}{{ child.objectName }}Store.data['children'] = obj.{{ child.objectName }};
                        num--;
                        if (num==0) resolve(obj);
                    }
                {% endfor %}
                if (num==0) resolve(obj);
            });
        }
    });
{% endfor %}
