{% for key,st in stores %}
    app.service('{{ key }}', function ($http,$q,$timeout{% for child in st.childrenelements %},{{ child.identifier }}Store{% endfor %}) {
        var {{ st.identifier }}Store = {'default': [], select: [], children: [], form: [] },
            contexts = ['default','select','children','form'],
            currentPage = { 'default': 1 , select: 1, children: 1, form: 1},
            pageLoaded = { 'default': 0 , select: 0, children: 0, form: 0},
            total = { 'default': 0 , select: 0, children: 0, form: 0},
            pageLength = 15,
            filters = { 'default': '' , select: '', children: '', form: ''},
            timer = 0,
            query = { 'default': '/{{ st.module }}/{{ st.objecttype }}', select: '/{{ st.module }}/{{ st.objecttype }}', children: '/{{ st.module }}/{{ st.objecttype }}', form: '/{{ st.module }}/{{ st.objecttype }}'},
            busy = { 'default': 0 , select: 0, children: 0, form: 0};

        return {
            getOneData: getOneData,
            getData: getData,
            getNewData: getNewData,
            saveData: saveData,
            getTotal: getTotal,
            export: exportData,
            setPage: setPage,
            setFilters: setFilters,
            getFilters: getFilters,
            getPageLength: getPageLength,
            setPageLength: setPageLength,
            currentPage: currentPage,
            itemsPerPage: pageLength,
            getDataFilter: getDataFilter,
            refresh: refresh,
            filter: filters,
            total: total,
            currentPage: currentPage,
            resetQuery: resetQuery,
            setQuery: setQuery,
            getQuery: getQuery,
            query: query,
            data:{{ st.identifier }}Store
        };
        function initContext(context) {
            {{ st.identifier }}Store[context] = [];
            total[context] = 0;
            filters[context] = '';
            currentPage[context] = '';
            resetQuery(context);
            contexts.push(context);
         }
        function resetQuery(context = 'default') {
            pageLoaded[context] = 0;
            query[context] = '/{{ st.module }}/{{ st.objecttype }}';
            console.log(context+' >> {{ st.identifier }} >> resetquery > '+query[context]);
            return query[context];
        }

        function setQuery(q,context = 'default') {
            console.log(context+' >> {{ st.identifier }} >> setquery >> '+q);
            if (!query[context]) initContext(context);
            pageLoaded[context] = 0;
            query[context] = q;
            filters[context] = '';
        }
        function getQuery(context = 'default'){
            if (!query[context]) initContext(context);
            return query[context];
        }
        function setPageLength(pl) {
            pageLength = pl;
        }
        function getPageLength() {
            return pageLength;
        }
        function getTotal(context = 'default') {
            return total[context];
        }
        function purgeStore(context = 'default'){
            if (Array.isArray({{ st.identifier }}Store[context]))
                {{ st.identifier }}Store[context].splice(0,{{ st.identifier }}Store[context].length);
        }
        /**
        * Définition de la page en cours
        */
        function setPage(page,context = 'default'){
            getData(page,context);
        }
        /**
        * Définition du filtre
        **/
        function refresh(context = 'default'){
            if (context == 'all') {
                for (var c in contexts){
                    pageLoaded[contexts[c]]--;
                    getData(currentPage[contexts[c]], contexts[c]);
                }
            }else{
                pageLoaded[contexts[c]]--;
                getData(currentPage[context], context);
            }
        }
        /**
        * Définition du filtre
        **/
        function setFilters(filter,context='default',blur = false,noreload = false){
            if (filters[context]==undefined) initContext(context);
            if (filter==filters[context]) return;
            filters[context] = filter;
            pageLoaded[context]=0;
            //on recharge le store
            $timeout.cancel(timer);
            timer=$timeout(function (){
                getData(1,context);
            }, 300);
        }
        /**
        * Récupération du filtre en cours
        **/
        function getFilters(context = 'default'){
            if (filters[context] == undefined) initContext(context);
            return filters[context];
        }
        /**
        * Test if this id already exists
        */
        function alreadyExists(id,context = 'default'){
            for (var i in {{ st.identifier }}Store[context]){
                if ({{ st.identifier }}Store[context][i].Id==id){
                    return true;
                }
            }
            return false;
        }
        /**
        * exportData
        * export des données en fichier csv
        */
        function exportData(context = 'default'){
            window.open(query[context]+'/Export.csv','_blank');
            console.log('store > {{ key }} > export '+query[context]);
        }
        /**
        * SaveData
        * Envoie des données vers le serveur et gestion des erreurs
        */
        function saveData(obj){
            return $q(function(resolve, reject) {
                var q = (obj.id > 0) ? '/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/Save.json' :'/{{ st.module }}/{{ st.objecttype }}/Save.json'
                $http.post(q,obj)
                    .success(function(data) {
                        console.log('store > {{ key }} > save success '+obj.id, data);
                        resolve(data);
                });
            });
        }
        /**
        * Return new data with default values
        * Return Promise
        */
        function getNewData() {
            console.log('new data {{ st.newData }}');
            return {{ st.newData | raw }};
        }
        /**
        * Look for specific id data into the store
        * Return Promise
        */
        function getOneData(id,context = 'default',full = true) {
            return $q(function(resolve, reject) {
                console.log(context+' >> store > {{ st.identifier }} > getOneData '+id,id);
                var idStore = -1;
                if (context!='all'){
                    for (var i in {{ st.identifier }}Store[context]){
                        if ({{ st.identifier }}Store[context][i].id==id){
                            idStore = i;
                            resolve({{ st.identifier }}Store[context][i]);
                            loadChildren({{ st.identifier }}Store[context][i]).then(function (obj){
                                {{ st.identifier }}Store[context][idStore] = unescapeData(updateRecord({{ st.identifier }}Store[context][idStore],obj));
                                if (obj._full){
                                    resolve(obj);
                                    return;
                                }
                            });
                            continue;
                        }
                    }
                }
                //si store pas chargé ou introuvable
                $http.get('/{{ st.module }}/{{ st.objecttype }}/'+id+'/getOneData.json')
                    .success(function(data) {
                        data = unescapeData(data);
                        console.log(context+' >> store > {{ key }} > load success '+id, data);
                        //mise à jour du store avec infos completes
                        if (context == 'all') {
                            for (var c in contexts){
                                for (var i in {{ st.identifier }}Store[contexts[c]]){
                                    if ({{ st.identifier }}Store[contexts[c]][i].id == id){
                                        {{ st.identifier }}Store[contexts[c]][i] = updateRecord({{ st.identifier }}Store[contexts[c]][i],data);
                                    }
                                }
                            }
                        }else{
                            if (idStore>-1){
                                //mise à jour si existant
                                data._full = true;
                                {{ st.identifier }}Store[context][idStore] = updateRecord({{ st.identifier }}Store[context][idStore],data);
                            }else {
                                //sinon on ajoute
                                if ({{ st.identifier }}Store[context] != undefined)
                                    idStore = {{ st.identifier }}Store[context].length;
                                else {{ st.identifier }}Store[context] = [];
                                {{ st.identifier }}Store[context].push(data);
                            }
                        }
                        //on charge les enfants uniquement si param full
                        if (full)
                            loadChildren(data).then(function (obj){
                                if (idStore>-1){
                                    obj._full = true;
                                    {{ st.identifier }}Store[context][idStore] = updateRecord({{ st.identifier }}Store[context][idStore],obj);
                                }
                                resolve({{ st.identifier }}Store[context][idStore]);
                            });
                        else resolve({{ st.identifier }}Store[context][idStore]);
                });
            });
        }
        /**
        * supprime les échappements
        */
        function unescapeData (obj){
            for (var i in obj){
                if (typeof obj[i] == "string"){
                    obj[i] = obj[i].replace(/\\n/g,'\n');
                    var map = {
                        '&amp;': '&',
                        '&lt;': '<',
                        '&gt;': '>',
                        '&quot;': '"',
                        '&#039;': "'"
                    };
                    obj[i] = obj[i].replace(/&amp;|&lt;|&gt;|&quot;|&#039;/g, function(m) {return map[m];});
                    obj[i] = obj[i].replace(/&amp;|&lt;|&gt;|&quot;|&#039;/g, function(m) {return map[m];});
                }
            }
            return obj;
        }
        /**
        * updateRecord
        * Mise à jour des données d'une ligne
        **/
        function updateRecord(c,n){
            for (var f in n){
                c[f] = n[f];
            }
            return c;
        }
        /**
        * Get data for combo component
        */
        function getDataFilter (filter,context='default') {
            console.log(context+' getdatafilter >> {{ st.module }}/{{ st.objecttype }}  ',filter);
            setFilters(filter,context,true,true);
            return getData(1,context);
        }
        /**
        * Load more data base on page
        */
        function getData(page,context='default') {
            var tmpquery = getQuery(context);
            var tmpfilters = '~'+getFilters(context);
            //create new context
            if (page<1||page==undefined) page=1;
            return $q(function(resolve, reject) {
                if (busy[context]) {
                    reject('already busy '+context);
                    return;
                }
                console.log(context+' >> store > {{ key }} > getData >> page '+page+' >> query '+getQuery(context),query);
                if (page!=pageLoaded[context]){
                    busy[context]=true;
                    $http.get(
                        tmpquery+'/getData.json',
                        {
                            params: {
                                filters: tmpfilters,
                                offset: (page-1)*pageLength,
                                limit: pageLength
                            }
                        }).success(function(data) {
                            busy[context]=false;
                            purgeStore(context);
                            pageLoaded[context] = page;
                            total[context] = data.total;
                            for (var i in data.data) {
                                if (!alreadyExists(data.data[i].id,context))
                                    {{ st.identifier }}Store[context].push(data.data[i]);
                            }
                            console.log(context+' >> store > {{ key }} > loaded success ',{{ st.identifier }}Store[context]);
                            resolve({{ st.identifier }}Store[context]);
                    });
                }else{
                    busy[context] = false;
                    resolve({{ st.identifier }}Store[context]);
                }
            });
        }
        /**
        * Chargement des données enfants
        */
        function loadChildren(obj) {
            var num = {{ st.childrenelements | length }};
            return $q(function(resolve, reject) {
                {% for child in st.childrenelements %}
                    {{ child.objectModule }}{{ child.objectName }}Store.setQuery('/{{ st.module }}/{{ st.objecttype }}/'+obj.id+'/{{ child.objectName }}','children');
                    if (!obj.{{ child.objectName }}) {
                        {{ child.objectModule }}{{ child.objectName }}Store.getData(1,'children').then(function (data){
                            obj.{{ child.objectName }} = data;
                        });
                        num--;
                        if (num==0) resolve(obj);
                    }else{
                        {{ child.objectModule }}{{ child.objectName }}Store.data['children'] = obj.{{ child.objectName }};
                        num--;
                        if (num==0) resolve(obj);
                    }
                {% endfor %}
                if (num==0) resolve(obj);
            });
        }
    }).run(function ({{ key }},$rootScope) {
        $rootScope.$on('{{ key }}',function (ev,data){
            switch (data.type){
                case 'edit':
                    //raffraichir seulement une valeur
                    {{ key }}.getOneData(data.id,'all',false,true);
                    break;
                default:
                    //raffraichir seulement une valeur
                    {{ key }}.refresh('all');
                    break;
            }
        });
    });
{% endfor %}
