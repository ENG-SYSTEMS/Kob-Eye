
app.controller('InfraAdminMenuTopCtrl', function($injector, $interval, $location, $scope, $rootScope, $http, $timeout, ParcServerStore ) {

    //Gestion du store
    $scope.store = ParcServerStore;
    $scope.store.resetQuery('InfraAdminMenuTop');
    $scope.store.currentPage['InfraAdminMenuTop'] = 1;

    //Gestion de la représentation 3D
    $scope.scnList = new Array();
    $scope.loadComplete = false;
    $scope.initScene = function (mainDiv, camPosition, camFocus){
        var sProperties = {
            containers: new Array(),
            cameras: new Array(),
            renderers: new Array(),
            controls: new Array(),
            managers: new Array(),
            lights: new Array(),
            items: new Array()
        };


        camPosition = camPosition || {x:-20,y:10,z:20};
        camFocus = camFocus || {x:0,y:0,z:10};

        //console.log(camPosition);

        var container = document.createElement( 'div' );
        var parentDiv = document.getElementById(mainDiv);
        parentDiv.appendChild( container );
        sProperties.containers.push(container);


        var camera = new THREE.PerspectiveCamera( 80, parentDiv.offsetWidth / parentDiv.offsetHeight, 1, 200 );
        //camera.position.x = camPosition.x;
        //camera.position.y = camPosition.y;
        //camera.position.z = camPosition.z;
        //camera.lookAt(new THREE.Vector3(camFocus.x,camFocus.y,camFocus.z));
        //camera.rotation.x = -Math.PI/2;
        sProperties.cameras.push(camera);



        var scene = new THREE.Scene();
        scene.fog = new THREE.FogExp2( 0xcccccc, 0.002 );

        //var helper = new THREE.CameraHelper( camera );
        //scene.add( helper );

        var ambient = new THREE.AmbientLight( 0x101030 );
        scene.add( ambient );

        var directionalLight1 = new THREE.DirectionalLight( 0xffeedd);
        directionalLight1.position.set( 0, 1, 1 );
        directionalLight1.castShadow =true;
        directionalLight1.shadow.mapSize.width = 512;  // default
        directionalLight1.shadow.mapSize.height = 512; // default
        directionalLight1.shadow.camera.near = 0.5;       // default
        directionalLight1.shadow.camera.far = 500      // default
        scene.add( directionalLight1 );

        var directionalLight2 = new THREE.DirectionalLight( 0x88aaff,0.4 );
        directionalLight2.position.set( -1, 1, -1 );
        directionalLight2.castShadow =true;
        directionalLight2.shadow.mapSize.width = 512;  // default
        directionalLight2.shadow.mapSize.height = 512; // default
        directionalLight2.shadow.camera.near = 0.5;       // default
        directionalLight2.shadow.camera.far = 500      // default
        scene.add( directionalLight2);

        sProperties.lights.push(ambient,directionalLight1,directionalLight2);

        var manager = new THREE.LoadingManager();
        manager.onProgress = function ( item, loaded, total ) {
            if(loaded == total){
                $scope.loadComplete = true;
                $scope.enableClick(scene, scene.uProps.cameras[0], scene.uProps.renderers[0]);
                var regex = new RegExp('{{ Urls.Servers }}/([0-9]+)');
                var temp;
                if( temp = $location.path().match(regex) ){
                    var servId = temp[1];
                    var focus = $scope.searchItemById(servId,scene);
                    focus.spotlight(true);
                    $scope.focusItem(focus,camera);
                }
            }
        };
        sProperties.managers.push(manager);

        var renderer = new THREE.WebGLRenderer({ alpha: true });
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( parentDiv.offsetWidth, parentDiv.offsetHeight );
        renderer.setClearColor( 0xffffff, 0);
        renderer.shadowMap.Enabled = true;

        sProperties.renderers.push(renderer);

        container.appendChild( renderer.domElement );

        scene.uProps = sProperties;

        //Recalcule la scene toutes les x msecondes
        $scope.animate();

        return scene;
    };

    $scope.getCenterBoundingBox = function(object3D) {
        var avVect = null;
        var occ = 0;
        function getBoundingBox (obj,parent) {
            if (obj.type === "Object3D" || obj.type === "Group") {
                for (var i in obj.children){
                    getBoundingBox(obj.children[i],obj);
                }
                return;
            }
            //console.log(obj);
            // console.log(parent);
            obj.geometry.computeBoundingBox();
            occ ++;
            if(!parent) parent = obj;
            if (avVect === null) {
                avVect = parent.localToWorld(obj.geometry.boundingBox.getCenter())
            } else {
                avVect.add(parent.localToWorld(obj.geometry.boundingBox.getCenter()));
            }
        };
        getBoundingBox(object3D);
        avVect.x /= occ;
        avVect.y /= occ;
        avVect.z /= occ;
        //console.log(avVect,occ);
        return avVect;
    };

    $scope.getCenterPoint = function(obj) {
        return $scope.getCenterBoundingBox(obj);
    };

    $scope.centerCamera = function(obj,scn,cam) {
        cam = cam || null;
        scn = scn || null;

        if(!scn && !cam)
            throw 'centerCamera nécéssite aumoins une scène ou une camera !';

        //console.log(obj);
        //dans un premier temps on positionne la cible de la camera sur le centre du réseau
        var objCenter = $scope.getCenterPoint(obj.threeObj);

        if(cam){
            cam.position.x = objCenter.x;
            cam.position.y = objCenter.y;
            cam.position.z = objCenter.z;
            cam.orbitPoint = objCenter;
        } else{
            var cams = scn.uProps.cameras;
            for ( var n in cams ){
                cam[n].position.x = objCenter.x;
                cam[n].position.y = objCenter.y;
                cam[n].position.z = objCenter.z;
                cam[n].orbitPoint = objCenter;
            }
        }

        //console.log('center',objCenter,obj.threeObj.worldToLocal(new THREE.Vector3(0,0,0)));

    };

    $scope.initOrbitalCam = function(scn, cam, rend, opts){
        var values = {
            noPan: true,
            noZoom: true,
            noRotate: true,
            maxPolarAngle: Math.PI/2,   // prevent the camera from going under the ground
            minDistance: 25,            // the minimum distance the camera must have from center
            maxDistance: 150,           // the maximum distance the camera must have from center
            zoomSpeed: 0.3,             // control the zoomIn and zoomOut speed
            rotateSpeed: 0.3            // control the rotate speed
        };


        //controls
        var controls = new THREE.OrbitControls( cam, rend.domElement ,rend.domElement);
        controls.target = cam.orbitPoint || new THREE.Vector3(0,0,0);
        Object.assign(controls,values); //assigne nos valeurs par defaut
        if(opts != undefined){
            Object.assign(controls,opts);
        }

        //controls.autoRotate = true;
        //controls.addEventListener( 'change', render );

        controls.rotateLeft(Math.degToRad(25));
        controls.rotateUp(Math.degToRad(-65));

        scn.uProps.controls.push(controls);

        setTimeout(function(){
            $scope.animateOrbitCam( cam );
        },1000);


        return false;
    };

    $scope.animateOrbitCam = function( cam ){
        var camPos = cam.position;
        //console.log('animateCAm',camPos);
        var camTween = new TWEEN.Tween(cam.position).to({x:-camPos.x,y:camPos.y,z:camPos.z},10000);
        var camTweenBis = new TWEEN.Tween(cam.position).to({x:camPos.x,y:camPos.y,z:camPos.z},10000);
        camTween.chain(camTweenBis);
        camTweenBis.chain(camTween);
        camTween.start();

        cam.tweens = new Array(camTween,camTweenBis);

        return false;
    };

    $scope.initClassicCam = function(scn, cam){
        for(var n in cam.tweens){
            cam.tweens[n].stop();
            TWEEN.remove(cam.tweens[n]);
        }

        var position = {};
        position.x = cam.orbitPoint.x;
        position.y = cam.orbitPoint.y;
        position.z = cam.orbitPoint.z;

        //var axisHelper = new THREE.AxisHelper( 100 );
        //scene.add( axisHelper );

        position.x += 10;
        position.y += 5;
        position.z += 28;

        var camTween = new TWEEN.Tween(cam.position).to({x:position.x,y:position.y,z:position.z},700).onUpdate(function(){cam.lookAt(cam.orbitPoint);}).onComplete(function(){$scope.animateClassicCam( cam );}).start();

        cam.lookAt(cam.orbitPoint);

        return false;
    };

    $scope.animateClassicCam = function( cam ){
        var camPos = cam.position;
        //console.log('animateCAm',camPos);
        var camTween = new TWEEN.Tween(cam.position).to({x:-camPos.x,y:camPos.y,z:camPos.z},10000).onUpdate(function(){cam.lookAt(cam.orbitPoint);});
        var camTweenBis = new TWEEN.Tween(cam.position).to({x:camPos.x,y:camPos.y,z:camPos.z},10000).onUpdate(function(){cam.lookAt(cam.orbitPoint);});
        camTween.chain(camTweenBis);
        camTweenBis.chain(camTween);
        camTween.start();

        cam.tweens = new Array(camTween,camTweenBis);

        return false;
    };



    $scope.animate = function()  {
        requestAnimationFrame( $scope.animate );
        TWEEN.update();
        $scope.render($scope.scnList);
    };

    $scope.render = function(scnList) {
        for( var i in scnList) {

            var scn = scnList[i];
            if (scn.skip) continue;

            for (var n in scn.uProps.controls) {
                if (scn.uProps.controls[n].hasOwnProperty('update'))
                    scn.uProps.controls[n].update();
            }

            var renderer = scn.uProps.renderers[0];
            for (var n in scn.uProps.cameras) {
                renderer.render(scn, scn.uProps.cameras[n]);
            }
        }
    };

    $scope.buildFromConfig = function(config,base,scene){
        //console.log('config',config);
        //routeur
        for (var f in config.devices){
            //console.log('devices',config.devices[f]);
            var dev = new MapItem(config.devices[f],scene);
            base.add(dev);
            //switch
            for (var n in config.devices[f].networks){
                var sw = new MapItem({type:'switch'},scene);
                dev.add(sw);
                $scope.buildFromConfig(config.devices[f].networks[n],sw);
            }
        }

        return true;
    };

    $scope.searchItemById = function(id, scn){
        var items = scn.uProps.items;
        for (var n in items){
            if(items[n].id == id)
                return items[n];
        }

        return false;
    };

    $scope.getItemFromMesh =function(uuid, scn){
        var items = scn.uProps.items;
        for(var n in items){
            for (var m in items[n].uuids){
                if(items[n].uuids[m] == uuid)
                    return items[n];
            }
        }

        return false;
    };

    var props = {{ quickview | raw }};

    $scope.quickview = '';
    $scope.viewClass = '';

    $scope.enableClick = function(scn, cam ,rend){
        var items = scn.uProps.items;

        //console.log(items);

        var meshes = new Array();
        for (var n in items){
            var item = items[n];
            //console.log('item',item);
            for(var m in item.threeObj.children){
                var child = item.threeObj.children[m];
                //console.log('child',child);

                if(child instanceof THREE.Mesh){
                    meshes.push(child);
                } else if(child instanceof THREE.Group){
                    //console.log('aaaaaaaaaaaa');
                    for(var p in child.children) {
                        if (child.children[p] instanceof THREE.Mesh) {
                            meshes.push(child.children[p]);
                            //console.log('bbbbbbbbbbb');
                        }
                    }
                } else {
                    //console.log('cccccccccc',child);
                }

            }
        }
        //console.log(meshes);

        var piControls = new THREE.ParcInfraControls( meshes, cam, rend.domElement );
        scn.uProps.controls.push(piControls);
        piControls.activate();
        piControls.activate();
        piControls.addEventListener('hoveron', function(event){
            var hoveredItem = $scope.getItemFromMesh(event.object.uuid,scn);
            //console.log(hoveredItem,event);
            var hoverTitle = document.getElementById('hoverTitle');
            if(!hoverTitle) {
                hoverTitle = document.createElement( 'div' );
                hoverTitle.id = 'hoverTitle';
                document.body.appendChild(hoverTitle);
            }
            hoverTitle.innerHTML = (hoveredItem.label || 'Inconnu') ;
            if(hoveredItem.id)
                hoverTitle.innerHTML += " ("+hoveredItem.id+") ";

            hoverTitle.setAttribute("style",
                'position: absolute;' +
                'top:'+(event.oEvent.y+15)+'px;' +
                'left:'+(event.oEvent.x+15)+'px;' +
                'z-index: 3000;' +
                'background-color: #fff;' +
                'border: 1px solid #000;' +
                'padding: 5px;');
        });
        piControls.addEventListener('hoveroff', function(event){
            var hoverTitle = document.getElementById('hoverTitle');
            hoverTitle.outerHTML = "";
            hoverTitle.delete;
        });
        piControls.addEventListener('selectedServ', function(event){
            var clickedItem = $scope.getItemFromMesh(event.object.uuid,scn);
            var nextstate = !clickedItem.selected;
            for(var n in items){
                items[n].selected = false;
                items[n].spotlight(items[n].selected);
            }
            clickedItem.selected = nextstate;
            clickedItem.spotlight(clickedItem.selected);
            //console.log(clickedItem);


            if(clickedItem.selected) {

                $scope.focusItem(clickedItem,cam);

            }else{
                $scope.viewClass = '';
                $scope.quickview = '';
                $scope.$apply();

                $scope.initClassicCam(scn,cam);
            }



            //centerCamera(clickedItem);
        });

    };


    //Gestion de l'actualisation du statut de l'infra
    $scope.updateInfraBreak = false;
    $scope.updateInfra = function(){

        $http.post("/Systeme/Utils/Data/getInfraJson.json",{})
            .then(function(response) {
                //console.log('response',response);
                for(var n in response.data.devices){
                    //console.log('ret',response.data.devices[n]);
                    var it = $scope.searchItemById(response.data.devices[n].id,$scope.scnList[0]);
                    //console.log('it',it);
                    if(it instanceof MapItem){
                        it.update(response.data.devices[n]);
                    }
                }

                if(!$scope.updateInfraBreak){
                    $timeout(function(){
                        $scope.updateInfra();
                    },10000);
                }

            }, function(response){
                console.log('ERRRRRRRRRRRRROOOOOOOOOOOOOOOOOOOOR',response);
                if(!$scope.updateInfraBreak){
                    $timeout(function(){
                        $scope.updateInfra();
                    },10000);
                }
            });

        return false;
    }

    $scope.focusItem = function(item, cam){
        var mainMesh = item.getMainMesh();
        //console.log('mainMesh',mainMesh);

        //Gestion Camera
        for(var n in cam.tweens){
            cam.tweens[n].stop();
            TWEEN.remove(cam.tweens[n]);
        }

        var pos = $scope.getCenterPoint(mainMesh);

        mainMesh.worldToLocal(pos);

        //var srvAxis1 = new THREE.AxisHelper(4);
        //mainMesh.add(srvAxis1);
        //srvAxis1.position.set(pos.x, pos.y, pos.z );

        var posx = pos.x+1;
        var posy = pos.y+4;
        var posz = pos.z+6;
        var camPos = new THREE.Vector3(posx,posy,posz);

        //console.log(pos);
        //console.log(camPos);

        mainMesh.localToWorld(pos);
        mainMesh.localToWorld(camPos);

        var quat = item.threeObj.getWorldQuaternion();
        var rot = new THREE.Quaternion();
        rot.setFromAxisAngle( new THREE.Vector3( -1 , 1 , 0 ), Math.PI / 8 );
        quat.multiplyQuaternions(quat,rot);

        var camTween = new TWEEN.Tween(cam.position).to({x:camPos.x,y:camPos.y,z:camPos.z},1000);
        camTween.start();
        var camTweenAngle = new TWEEN.Tween(cam.quaternion).to({w:quat.w,x:quat.x,y:quat.y,z:quat.z},1000);
        camTweenAngle.start();

        //Gestion données
        $scope.store.getOneData(item.id, 'InfraAdminMenuTop').then(function (data) {
            var obj = data;
            var html = "<table>";
                for (var n in props) {
                    var prop = props[n];
                    //console.log('prop',prop);
                    for (var m in obj) {
                        var val;
                        switch (prop.type){
                            case 'int':
                                val = '<span class="label label-primary">'+obj[m]+'</span>';
                                break;
                            case 'boolean':
                                if(obj[m]){
                                    val = '<span class="label label-success" ><i class="fa fa-check"></i></span>';
                                } else {
                                    val = '<span class="label label-danger" ><i class="fa fa-times"></i></span>';
                                }
                                break;
                            default:
                                val = '<span>'+obj[m]+'</span>';
                        }

                        //console.log('m',m);
                        if (m == prop.name) {
                            html += '<tr><th class="">' + prop['description'] + '</th><td>' + val + '</td></tr>';
                        }
                    }
                }
                html += "</table>";
            html += "<br/><a href=\"#/{{ Urls.Servers }}/"+obj['id']+"\">Voir le détail</a>";
            $scope.viewClass = 'showQuick';
            $scope.quickview = html;
        });
    };


    //Initialisation du bouzin
    $scope.config = {{ config | raw }};

    var scene = $scope.initScene('infra_map');
    $scope.base = new MapItem({type:'switch',rotateAxis:'x',colors:[0x888888],name:'Internet'},scene);
    scene.add($scope.base.threeObj);
    $scope.scnList.push(scene);

    if($scope.buildFromConfig($scope.config,$scope.base,scene)){
        $scope.base.compute();
        scene.updateMatrixWorld();
    }



    $scope.centerCamera($scope.base,scene,scene.uProps.cameras[0]);
    //$scope.initOrbitalCam(scene, scene.uProps.cameras[0], scene.uProps.renderers[0]);
    //$scope.initClassicCam(scene, scene.uProps.cameras[0]);

    $scope.updateInfra();

    //Variantes en fonction de l'endroit ou l'on se trouve
    $scope.display = true;
    $rootScope.$on('$locationChangeSuccess', function(event){
            var reg = new RegExp('{{ Urls.Profil }}');
            if( $location.path().match(reg) ){
                $scope.display = false;
            } else {
                $scope.display = true;
            }

            var loaded = $interval(function(){
            console.log('loading...');
            if($scope.loadComplete){

                var camera = $scope.scnList[0].uProps.cameras[0];
                var scene = $scope.scnList[0];
                var items = $scope.scnList[0].uProps.items;
                var regex = new RegExp('{{ Urls.Servers }}/([0-9]+)');


                var temp;

                for(var n in items){
                    items[n].selected = false;
                    items[n].spotlight(items[n].selected);
                }

                if( temp = $location.path().match(regex) ){
                    var servId = temp[1];
                    var focus = $scope.searchItemById(servId,scene);
                    focus.spotlight(true);
                    $scope.focusItem(focus,camera);
                    focus.selected = true;
                } else{
                    $scope.viewClass = '';
                    $scope.quickview = '';
                    //$scope.$apply();

                    $scope.initClassicCam(scene,camera);
                }
                $interval.cancel(loaded);
            }
        },100);


    });

});