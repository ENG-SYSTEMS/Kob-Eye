app.controller('{{ identifier }}Ctrl', function($interval, $timeout,$location, $compile, $sce, $scope, $rootScope, $routeParams,$http,SystemeTacheStore,SystemeActivityStore) {
    $scope.{{ identifier }}gantt = {};
    function init(min,max){
        var dateformat =  'DD/MM/YYYY HH:mm';
        $scope.{{ identifier }}gantt.from = min;
        $scope.{{ identifier }}gantt.fromdate = moment.unix($scope.{{ identifier }}gantt.from);
        $scope.{{ identifier }}gantt.frompicker = moment.unix($scope.{{ identifier }}gantt.from).format(dateformat);
        $scope.{{ identifier }}gantt.to = max;
        $scope.{{ identifier }}gantt.todate = moment.unix($scope.{{ identifier }}gantt.to);
        $scope.{{ identifier }}gantt.topicker = moment.unix($scope.{{ identifier }}gantt.to).format(dateformat);
        console.log('gantt >> from:', $scope.{{ identifier }}gantt.fromdate,' to:', $scope.{{ identifier }}gantt.todate,'orig:',min,max);
        $scope.{{ identifier }}options = {
            fromDate:$scope.{{ identifier }}gantt.fromdate,
            toDate:$scope.{{ identifier }}gantt.todate,
            headers: ['day','hour','minute'],
            viewScale: '5 minutes',
            headersFormats: {
                minute:'mm'
            }
        };
    }
    var colors= [
        '#01a8fe',
        '#46be8a',
        '#E5AC0E',
        '#f39834',
/*        '#fb434a',*/
/*        '#b70070',*/
        '#563d7c',
/*        '#744411',
        '#747474',
        '#000000'*/
    ];
    init(moment().subtract(1, 'hour').unix(),moment().unix());

    //options
    $scope.{{ identifier }}options = {
    };
    /**
     * register Api
     * @param api
     */
    $scope.{{ identifier }}registerApi = function(api) {
        console.log('activity gantt >>> registerApi');
        $scope.{{ identifier }}gantt.api = api;
        api.core.on.ready($scope, function () {
            // Call API methods and register events.
            $scope.{{ identifier }}gantt.api.data.on.change($scope, function (newData, OldData) {
                $scope.{{ identifier }}gantt.api.side.setWidth(undefined);
            });
        });
        setReady('comp');
    }
    /**
     * storeSettings
     * Definition des stores
     */
    $scope.{{ identifier }}storeSettings = function () {
        console.log('activity gantt >>> storeSettings',$scope.obj);
        SystemeActivityStore.initContext('gantt');
        SystemeActivityStore.setPageLength(1000, 'gantt');
        SystemeActivityStore.sort['gantt'] = ['Id','ASC'];
        SystemeActivityStore.setFilters('Tache.TacheId(' + $scope.currentObj.id + ')','gantt');
        setReady('obj');
    };
    $scope.currentObj = null;
    var t = $interval(function () {
        if ($scope.getObj().id>0&&$scope.getObj()._full){
            $scope.currentObj = $scope.getObj();
            $scope.{{ identifier }}storeSettings();
            $interval.cancel(t);
        }
    },100,20);

    /**
     * setReady
     */
    var ganttcomp=false;
    var ganttobj=false;
    function setReady (type) {
        if (type=='comp')ganttcomp = true;
        if (type=='obj')ganttobj = true;
        if (ganttcomp&&ganttobj){
            $scope.{{ identifier }}refreshGantt();
            renderGraph();
            console.log('activity gantt >> everybody \'s ready');
        }
    }
    /**
     * refreshGantt
     * Rafraichit le gantt et ses données
     */
    $scope.{{ identifier }}refreshGantt = function () {
        SystemeActivityStore.getData(1,'gantt').then(function (data) {
            //refresh gantt data
            var out = {{ identifier }}formatData(data);
            //console.log('gantt data >>>>>>>>>>>>>>>> ',out);
            $scope.{{ identifier }}options.fromDate = $scope.{{ identifier }}gantt.fromdate;
            $scope.{{ identifier }}options.toDate = $scope.{{ identifier }}gantt.todate,
            $scope.{{ identifier }}gantt.data = out;
        },function (err) {

        });
    }

    /**
     * formatData
     * Reformate les données pour le gantt
     * @param data
     * @returns {[*,*]}
     */
    function {{ identifier }}formatData(data) {
        var out = [];
        var min  = moment().unix();
        var max = 0;
        var prev,next,dep;
        for (var i in data){
            if (data[i].tmsCreate<min) min =data[i].tmsCreate;
            if (data[i].tmsEdit>max) max =data[i].tmsEdit;
            dep = [];
            if (i>0) dep.push({from:'task-'+data[i-1].id});
            if (data[i+1]) dep.push({to:'task-'+data[i+1].id});

            out.push({
                name: data[i].label,
                tasks: [
                    {
                        name: data[i].label,
                        from: moment.unix(data[i].tmsCreate),
                        to:  moment.unix(data[i].tmsEdit),
                        color: (!data[i].Errors)?colors[i%colors.length]:'#fb434a',
                        origid: data[i].id,
                        id: 'task-'+data[i].id,
                        progress: data[i].Progression,
                        dependencies: dep
                    }
                ],
                origid: data[i].id
            });
        }
        init(min,max);
        return out;
    }

    /**
     * Ecouteur dans le cas de changement de page
     *
     */
    $scope.$on('refreshFicheData',function () {
        console.log('gantt >> received event to change data');
        $scope.currentObj = $scope.getObj();
        $scope.{{ identifier }}storeSettings();
    });

    $scope.bandwidthChart = null;
    /**
     * Affichage du graphique
     */
    function renderGraph() {
        if ($scope.bandwidthChart) {
            console.info('gantt >> bandwidth destroy', $scope.bandwidthChart);
            $scope.bandwidthChart.destroy();
            $scope.bandwidthChart = null;
        }
        if (!$scope.currentObj.Graph||!$scope.currentObj.Graph.length){
            console.info('gantt >>bandwidth pas de graph', $scope.currentObj.Graph);
            $scope.showGraph = false;
            return false;
        }
        var bandwidth = JSON.parse($scope.currentObj.Graph);
        console.info('gantt >> bandwidth init', bandwidth);
        $scope.showGraph = true;
        $.getJSON('/Tools/Js/ApexChart/locales/fr.json', function (data) {
            var fr = data;
            var options = {
                chart: {
                    locales: [fr],
                    defaultLocale: 'fr',
                    height: 280,
                    type: "line",
                    stacked: true,
                    animations: {
                        enabled: true,
                        easing: "linear"
                    },
                    toolbar: {
                        show: false,
                        offsetY: -10
                    },
                    zoom: {
                        enabled: false
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: "smooth",
                    width: 2
                },
                grid: {
                    padding: {
                        left: 0,
                        right: 0
                    }
                },
                markers: {
                    size: 0,
                    hover: {
                        size: 0
                    }
                },
                fill: {
                    opacity: [0.15, 0.15, 1],
                    gradient: {
                        inverseColors: false,
                        shade: 'light',
                        type: "vertical",
                        opacityFrom: 0.85,
                        opacityTo: 0.55,
                        stops: [0, 100, 100, 100]
                    }
                },
                series: [
                    {
                        name: "Download",
                        data: bandwidth.RX,
                        type: 'area',
                        color: colors._success
                    },
                    {
                        name: "Upload",
                        type: 'area',
                        data: bandwidth.TX,
                        color: colors._primary
                    },
                    {
                        name: "Cpu",
                        type: 'line',
                        data: bandwidth.Cpu,
                        color: colors._danger
                    },
                    {
                        name: "Ram",
                        type: 'line',
                        data: bandwidth.Ram,
                        color: colors._warning
                    },
                    {
                        name: "Io",
                        type: 'line',
                        data: bandwidth.Io,
                        color: colors._io
                    }
                ],
                xaxis: {
                    type: "datetime",
/*                    range: 120000,*/
                    labels: {
                        /**
                         * Allows users to apply a custom formatter function to xaxis labels.
                         *
                         * @param { String } value - The default value generated
                         * @param { Number } timestamp - In a datetime series, this is the raw timestamp
                         * @param { index } index of the tick / currently executing iteration in xaxis labels array
                         */
                        formatter: function (value, timestamp, index) {
                            return moment(new Date(timestamp)).format("HH:mm:ss")
                        }
                    }
                },
                yaxis: [
                    {
                        seriesName: 'Upload',
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#008FFB'
                        },
                        labels: {
                            style: {
                                color: '#008FFB',
                            }
                        },
                        title: {
                            text: "Bande passante kB/sec ",
                            style: {
                                color: '#008FFB',
                            }
                        },
                        tooltip: {
                            enabled: true
                        }
                    },
                    {
                        seriesName: 'Download',
                        show: false,
                        tooltip: {
                            enabled: true
                        }
                    },
                    {
                        seriesName: 'Cpu',
                        opposite: true,
                        min: 0,
                        max: 100,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#00E396'
                        },
                        labels: {
                            style: {
                                color: '#00E396',
                            }
                        },
                        title: {
                            text: "Pourcentage utilisation %",
                            style: {
                                color: '#00E396',
                            }
                        },
                    },
                    {
                        seriesName: 'Ram',
                        min: 0,
                        max: 100,
                        show: false,
                        tooltip: {
                            enabled: true
                        }

                    },
                    {
                        seriesName: 'Io',
                        min: 0,
                        max: 100,
                        show: false,
                        tooltip: {
                            enabled: true
                        }

                    }
                ]
                ,
                legend: {
                    show: true,
                    floating: true,
                    horizontalAlign: "center",
                    onItemClick: {
                        toggleDataSeries: false
                    },
                    position: "top",
                    offsetY: 0,
                    offsetX: 0
                }
            };
            $scope.bandwidthChart = new ApexCharts(
                document.querySelector("#chart-bandwidth"),
                options
            );
            $scope.bandwidthChart.render();
        });
    }
});
