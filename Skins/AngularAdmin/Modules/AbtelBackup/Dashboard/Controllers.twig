
app.controller('{{ Url }}Ctrl', function($anchorScroll, $interval, $location, $scope, $rootScope,  AbtelBackupActivityStore, AbtelBackupBackupStoreStore, AbtelBackupEsxVmStore) {
    //------------------------------------------//
    //                 ANCHORS
    //------------------------------------------//
    $anchorScroll.yOffset = 50;
    $anchorScroll();

    $scope.gotoAnchor = function(x) {
        var newHash = x;
        if ($location.hash() !== newHash) {
            // set the $location.hash to `newHash` and
            // $anchorScroll will automatically scroll to it
            $location.hash(x);
        } else {
            // call $anchorScroll() explicitly,
            // since $location.hash hasn't changed
            $anchorScroll();
        }
    };


    //------------------------------------------//
    //                 STORES                   //
    //------------------------------------------//
    //
    //      Activity
    //
    //Init du store
    $scope.AbtelBackupActivityStore = AbtelBackupActivityStore;

    var now = Math.floor(Date.now()/1000);
    var seuil = now - 7200;


    $scope.AbtelBackupActivityStore.setFilters('Started=1&Success=0&Errors=0+tmsEdit>'+seuil,'dash');
    $scope.AbtelBackupActivityStore.getData(1,'dash');

    $rootScope.$on('AbtelBackupActivityStore',function (ev,data){
        switch (data.type){
            case 'add':
                $scope.store.addOneData(data.id,data.data,'dash');
                break;
        }
    });

    var refresh = $interval(function(){
        var now = Math.floor(Date.now()/1000);
        var seuil = now - 7200;
        for(var n in $scope.AbtelBackupActivityStore.data['dash']){
            var StData = $scope.AbtelBackupActivityStore.data['dash'][n];
            if(StData.tmsEdit < seuil) $scope.AbtelBackupActivityStore.deleteOneData(StData.id,'dash',true);
        }
    },5000);


    //
    //      BackupStore
    //
    //Init du store
    $scope.AbtelBackupBackupStoreStore = AbtelBackupBackupStoreStore;
    $scope.AbtelBackupBackupStoreStore.setFilters('Titre=Sauvegarde Locale','dash');

    $scope.pie = {};
    //traitement des données pour générer le chart
    var humanReadable = function(Mo){
        var units = new Array('Mo','Go','To','Po');

        var pow = 0;
        while(Mo > 1024){
            Mo /= 1024;
            pow++;
        }
        Mo = Mo.toFixed(2)
        return Mo + units[pow];
    }
    var refreshSizes = function(){
        var data = $scope.AbtelBackupBackupStoreStore.data['dash'][0];
        if(!data) return false;
        var size = parseInt(data.Size);
        var nfsSize = parseInt(data.NfsSize);
        var borgSize = parseInt(data.BorgSize);
        var freeSize = size-nfsSize-borgSize;
        $scope.pie.data = [nfsSize,borgSize,freeSize];
        if($scope.pie.labels) return true;

        //$scope.pie.labels = ['Nfs '+humanReadable(nfsSize),'Backup '+humanReadable(borgSize),'Disponible '+humanReadable(freeSize)];
        $scope.pie.labels = ['Nfs','Backup','Disponible'];

        $scope.pie.dsOverride ={
            data: $scope.pie.data,
            backgroundColor: ['#f39834','#fb434a','#46be8a'],
            hoverBackgroundColor: ['#e38824','#eb333a','#36ae7a'],
        };

        $scope.pie.options = {
            legend: {display: true},
            tooltips: {
                callbacks: {
                    label: function(tooltipItems, data) { // Solution found on https://stackoverflow.com/a/34855201/6660135
                        //console.log(tooltipItems,data);
                        //Return value for label
                        return ' '+data.labels[tooltipItems.index]+' : ' + humanReadable(data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index]) ;
                    }
                }
            }
        };
        return true;
    }
    $scope.AbtelBackupBackupStoreStore.getData(1,'dash').then(refreshSizes);

    $rootScope.$on('AbtelBackupBackupStoreStore',function (ev,data){
        if(data.type == 'edit' && data.data.Titre=='Sauvegarde Locale'){
            refreshSizes(true);
        }
    });





    //
    //      EsxVm
    //
    //Init du store
    $scope.AbtelBackupEsxVmStore = AbtelBackupEsxVmStore;
    $scope.AbtelBackupEsxVmStore.setFilters('BackupSize>0','dash');

    $scope.bar = {};
    var refreshSizesBar = function(){
        var data = $scope.AbtelBackupEsxVmStore.data['dash'];
        if(!data.length) return false;

        var datasetVM = [];
        var datasetBorg = [];
        for (var n in data){
            datasetVM.push(parseInt(data[n].Size));
            datasetBorg.push(parseInt(data[n].BackupSize));
        }

        $scope.bar.data = [datasetVM,datasetBorg];
        if($scope.bar.labels) return true;

        $scope.bar.labels = [];
        for (var n in data) {
            $scope.bar.labels.push(data[n].Titre);
        }

        $scope.bar.dsOverride =[
                {
                    label:'Taille Backup',
                    backgroundColor: '#f39834',
                    hoverBackgroundColor: '#e38824',
                    borderColor:'#d37814'
                },
                {
                    label:'Taille Vm',
                    backgroundColor: '#46be8a',
                    hoverBackgroundColor: '#36ae7a',
                    borderColor:'#26bc6a'
                }
        ];

        $scope.bar.options = {
            legend: {display: true},
            tooltips: {
                callbacks: {
                    label: function(tooltipItems, data) { // Solution found on https://stackoverflow.com/a/34855201/6660135
                        console.log(tooltipItems,data);
                        //Return value for label
                        return ' '+data.datasets[tooltipItems.datasetIndex].label+' : ' + humanReadable(data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index]) ;
                    }
                }
            }
        };
        return true;
    }
    $scope.AbtelBackupEsxVmStore.getData(1,'dash').then(refreshSizesBar)



    $rootScope.$on('AbtelBackupEsxVmStore',function (ev,data){
        if(data.type == 'edit'){
            refreshSizesBar(true);
        }
    });


});