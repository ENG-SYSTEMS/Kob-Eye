
app.controller('{{ Url }}Ctrl', function($anchorScroll, $interval, $location, $scope, $rootScope,  SystemeActivityStore, AbtelBackupStateStore, AbtelBackupBorgRepoStore) {
    //------------------------------------------//
    //                 ANCHORS
    //------------------------------------------//
    $anchorScroll.yOffset = 50;
    $anchorScroll();

    $scope.gotoAnchor = function(x) {
        var newHash = x;
        if ($location.hash() !== newHash) {
            // set the $location.hash to `newHash` and
            // $anchorScroll will automatically scroll to it
            $location.hash(x);
        } else {
            // call $anchorScroll() explicitly,
            // since $location.hash hasn't changed
            $anchorScroll();
        }
    };


    //------------------------------------------//
    //                 STORES                   //
    //------------------------------------------//
    //
    //      Activity
    //
    //Init du store
    $scope.SystemeActivityStore = SystemeActivityStore;
    // Utile seulement a cause de la template d'affichage commun avec la listchildren
    var now = Math.floor(Date.now()/1000);
    var seuil = now - 86400;

    $scope.SystemeActivityStore.setFilters('Started=1&Success=0&Errors=0+tmsEdit>'+seuil,'dash');
    $scope.SystemeActivityStore.getData(1,'dash');
    $scope.AbtelBackupActivity = {
        data: SystemeActivityStore.data.dash,
        store: SystemeActivityStore,
        filter: SystemeActivityStore.filter.dash,
        currentPage: SystemeActivityStore.currentPage.dash,
        itemsPerPage: SystemeActivityStore.itemsPerPage,
        selected: {
            selectall: false
        }
    }

    $rootScope.$on('SystemeActivityStore',function (ev,data){
        switch (data.type){
            case 'add':
                $scope.SystemeActivityStore.addOneData(data.id,data.data,'dash');
                break;
        }
    });

    var refresh = $interval(function(){
        var now = Math.floor(Date.now()/1000);
        var seuil = now - 86400;
        for(var n in $scope.SystemeActivityStore.data['dash']){
            var StData = $scope.SystemeActivityStore.data['dash'][n];
            if(StData.tmsEdit < seuil) {
                $scope.SystemeActivityStore.deleteOneData(StData.id,'dash',true);
            }
        }
    },5000);


    //
    //      BackupStore
    //
    //Init du store
    $scope.AbtelBackupStateStore = AbtelBackupStateStore;

    $scope.pie = {};
    //traitement des données pour générer le chart
    var humanReadable = function(Mo){
        var units = new Array('Mo','Go','To','Po');

        var pow = 0;
        while(Mo > 1024){
            Mo /= 1024;
            pow++;
        }
        Mo = Mo.toFixed(2)
        return Mo + units[pow];
    }
    var refreshSizes = function(){
        var data = $scope.AbtelBackupStateStore.data['dash'][0];
        if(!data) return false;
        var nfsSize = parseInt(data.NfsSize);
        var borgSize = parseInt(data.BorgSize);
        var nasSize = parseInt(data.NasSize);
        var restoreSize = parseInt(data.RestoreSize);
        var freeSize = parseInt(data.FreeSize);
        $scope.pie.data = [nfsSize,borgSize,nasSize,restoreSize,freeSize];
        if($scope.pie.labels) return true;

        //$scope.pie.labels = ['Clone '+humanReadable(nfsSize),'Backup '+humanReadable(borgSize),'NAS '+humanReadable(nasSize),'Restore '+humanReadable(restoreSize),'Disponible '+humanReadable(freeSize)];
        $scope.pie.labels = ['Clone','Backup','Nas','Restore','Disponible'];

        $scope.pie.dsOverride ={
            data: $scope.pie.data,
            backgroundColor: ['#f39834','#fb434a','#01a8fe','#7f56c1','#46be8a'],
            hoverBackgroundColor: ['#e38824','#eb333a','#01a8fe','#7f56c1','#36ae7a'],
        };

        $scope.pie.options = {
            legend: {display: true},
            tooltips: {
                callbacks: {
                    label: function(tooltipItems, data) { // Solution found on https://stackoverflow.com/a/34855201/6660135
                        //console.log(tooltipItems,data);
                        //Return value for label
                        return ' '+data.labels[tooltipItems.index]+' : ' + humanReadable(data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index]) ;
                    }
                }
            }
        };
        return true;
    }

    $rootScope.$on('AbtelBackupStateStore',function (ev,data){
        if(data.type == 'add'){
            refreshSizes(true);
        }
    });





    //
    //      EsxVm
    //
    //Init du store
    $scope.AbtelBackupBorgRepoStore = AbtelBackupBorgRepoStore;
    $scope.AbtelBackupBorgRepoStore.setFilters('Size>0','dash');

    $scope.bar = {};
    var numberWithCommas = function(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    };
    var refreshSizesBar = function(){
        var data = $scope.AbtelBackupBorgRepoStore.data['dash'];
        if(!data.length) return false;

        var datasetBorg = [];
        for (var n in data){
            datasetBorg.push(parseInt(data[n].Size));
        }

        $scope.bar.data = [datasetBorg];
        if($scope.bar.labels) return true;

        $scope.bar.labels = [];
        for (var n in data) {
            $scope.bar.labels.push(data[n].Titre);
        }

        $scope.bar.dsOverride =[
            {
                label:'Taille Backup',
                backgroundColor: 'rgba(243,152,52,0.5)',
                hoverBackgroundColor: 'rgba(227,136,36,0.8)',
                borderColor:'#d37814',
                stack: 1,
                xAxisID: 'Xaxis1'
            }
        ];

        $scope.bar.options = {
            legend: {display: true},
            maintainAspectRatio: false,
            tooltips: {
                callbacks: {
                    label: function(tooltipItems, data) { // Solution found on https://stackoverflow.com/a/34855201/6660135
                        //console.log(tooltipItems,data);
                        //Return value for label
                        return ' '+data.datasets[tooltipItems.datasetIndex].label+' : ' + humanReadable(data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index]) ;
                    }
                }
            },
            scales: {
                xAxes: [{
                    stacked: false,
                    barThickness: 20,
                    categoryPercentage: 0.5,
                    id: 'Xaxis1'
                },{
                    stacked: false,
                    barThickness: 40,
                    id: 'Xaxis2',
                    type: 'category',
                    categoryPercentage: 0.5,
                    barPercentage: 1,
                    gridLines: {
                        offsetGridLines: true
                    },
                    label: 'Go',
                    offset:true,
                    display: false
                }],
                yAxes: [{
                    stacked: false,
                    ticks: {
                        callback: function(value) { return numberWithCommas(value); },
                    },
                }]
            }
        };
        return true;
    }
    $scope.myCharts = {};
    $scope.$on('chart-create', function (event, chart) {
        //console.log(chart.chart.canvas.id);
        //console.log(chart.chart.config.type);
        //console.log(chart);
        //If id is the same, reference will be updated
        $scope.myCharts[chart.chart.canvas.id] = chart;
    });

    $rootScope.$on('AbtelBackupBorgRepoStore',function (ev,data){
        if(data.type == 'edit' || data.type == 'add'){
            refreshSizesBar(true);
        }
    });

    //call data and init bar
    $scope.AbtelBackupBorgRepoStore.getData(1,'dash').then(refreshSizesBar)


    //---------------------//
    //      BandWidth      //
    //---------------------//
    var refreshBandwidthBar = function(){
        var data = $scope.AbtelBackupStateStore.data['dash'];
console.info('bandwidth init',data,data.length);
        //if(!data.length) return false;

        var datasetRX = [];
        var datasetTX = [];
        for (var n in data){
            datasetRX.push(parseInt(data[n].RX));
            datasetTX.push(parseInt(data[n].TX));
        }


        /*$scope.line = {};
        $scope.line.data = [datasetRX,datasetTX];
        if($scope.line.labels) return true;

        $scope.line.labels = ['Download','Upload'];

        $scope.line.data = [Array.apply(null, Array(60)).map(Number.prototype.valueOf,0),Array.apply(null, Array(60)).map(Number.prototype.valueOf,0)];

        var min = -60;
        $scope.line.labels = Array.apply(null, Array(60)).map(function(a){
            min++;
            return min+' sec.';
        });

        $scope.line.series = ['Total Upload','Total Download'];

        $scope.line.dsOverride =[
            {
                yAxisID: 'Yaxis1',
                borderColor: 'rgba(70,190,138,0.5)',
                backgroundColor: 'rgba(255,255,255,0)',
                fill: false
            },
            {
                borderColor: 'rgba(70,190,138,0.5)',
                backgroundColor: 'rgba(255,255,255,0)',
                borderDash: [5,4],
                fill: false
            }
        ];

        $scope.line.options = {
            scales: {
                yAxes: [
                    {
                        id: 'Yaxis1',
                        type: 'linear',
                        display: true,
                        position: 'left'
                    }
                ]
            }
        };*/
        var colors = {
            _primary: '#01a8fe',
            _default: '#acb7bf',
            _success: '#46be8a',
            _danger: '#fb434a',
            _warning: '#f39834'
        };

        $scope.bandwidth = [
            ['Download'],
            ['Upload'],
            ['Cpu'],
            ['Ram'],
            ['Io']
        ];

        console.log('>>> chart bandwidth init');
        $scope.bandwidthChart = c3.generate({
            bindto: '#chart-bandwidth',
            data: {
                columns: $scope.bandwidth,
                axes: {
                    Download: 'y',
                    Upload: 'y',
                    Cpu: 'y2',
                    Ram: 'y2',
                    Io: 'y2'
                },
                types: {
                    Download: 'area-spline',
                    Upload: 'area-spline',
                    Cpu: 'spline',
                    Ram: 'spline',
                    Io: 'spline'
                }
            },
            axis: {
                y: {
                    show: true,
                    label: {
                        text: 'Kb/Sec',
                        position: 'outer-middle'
                    },
                    tick: {
                        format: d3.format("kbs,") // ADD
                    }
                },
                y2: {
                    show: true,
                    label: {
                        text: 'Pourcentage %',
                        position: 'outer-middle'
                    },
                    tick: {
                        format: d3.format("%,") // ADD
                    }
                }
            },
            color: {
                pattern: [colors._primary, colors._success,colors._warning,colors._default,colors._danger,]
            }
        });
        return true;
    }
    var updateBandwidth = function(){
        var dots = $scope.AbtelBackupStateStore.data['dash'];
        var dot = dots[dots.length-1];
        //Download
        if ($scope.bandwidth[0].length>60){
            $scope.bandwidth[0].splice(1,1);
        }
        $scope.bandwidth[0].push(dot['RX']);
        //Upload
        if ($scope.bandwidth[1].length>60){
            $scope.bandwidth[1].splice(1,1);
        }
        $scope.bandwidth[1].push(dot['TX']);
        //Cpu
        if ($scope.bandwidth[2].length>60){
            $scope.bandwidth[2].splice(1,1);
        }
        $scope.bandwidth[2].push(dot['CpuUsage'].split('.')[0]/100);
        //Ram
        if ($scope.bandwidth[3].length>60){
        $scope.bandwidth[3].splice(1,1);
        }
        $scope.bandwidth[3].push(dot['RamUsage'].split('.')[0]/100);
        //Io
        if ($scope.bandwidth[4].length>60){
            $scope.bandwidth[4].splice(1,1);
        }
        $scope.bandwidth[4].push(dot['IOUsage'].split('.')[0]/100);

        //Update charts
        $scope.bandwidthChart.load({
            columns: $scope.bandwidth
        });
        console.log('>>> update bandwidth',$scope.bandwidth, dot,dots);
    }

    //init bar bandwidth
    $scope.AbtelBackupStateStore.getData(1,'dash').then(refreshSizes).then(refreshBandwidthBar);


    $rootScope.$on('AbtelBackupStateStore',function (ev,data){
        if(data.type == 'add' ){
            updateBandwidth();
        }
    });


});