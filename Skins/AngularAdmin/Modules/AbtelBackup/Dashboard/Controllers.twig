app.controller('{{ Url }}Ctrl', function ($anchorScroll, $interval, $location, $scope, $rootScope, SystemeActivityStore, AbtelBackupStateStore, AbtelBackupBorgRepoStore) {
    //------------------------------------------//
    //                 ANCHORS
    //------------------------------------------//
    $anchorScroll.yOffset = 50;
    $anchorScroll();

    $scope.gotoAnchor = function (x) {
        var newHash = x;
        if ($location.hash() !== newHash) {
            // set the $location.hash to `newHash` and
            // $anchorScroll will automatically scroll to it
            $location.hash(x);
        } else {
            // call $anchorScroll() explicitly,
            // since $location.hash hasn't changed
            $anchorScroll();
        }
    };
    var colors = {
        _primary: '#008FFB',
        _secondary: '#3F51B5',
        _default: '	#C4BBAF',
        _success: '#00E396',
        _danger: '#FF4560',
        _warning: '#FEB019',
        _io: '#775DD0'
    };

    var humanReadable = function (Mo) {
        var units = new Array('Mo', 'Go', 'To', 'Po');

        var pow = 0;
        while (Mo > 1024) {
            Mo /= 1024;
            pow++;
        }
        Mo = Mo.toFixed(2)
        return Mo +' '+ units[pow];
    }

    //------------------------------------------//
    //                 STORES                   //
    //------------------------------------------//
    //
    //      Activity
    //
    //Init du store
    $scope.SystemeActivityStore = SystemeActivityStore;
    // Utile seulement a cause de la template d'affichage commun avec la listchildren
    var now = Math.floor(Date.now() / 1000);
    var seuil = now - 86400;

    $scope.SystemeActivityStore.setFilters('Started=1&Success=0&Errors=0+tmsEdit>' + seuil, 'dash');
    $scope.SystemeActivityStore.getData(1, 'dash');
    $scope.AbtelBackupActivity = {
        data: SystemeActivityStore.data.dash,
        store: SystemeActivityStore,
        filter: SystemeActivityStore.filter.dash,
        currentPage: SystemeActivityStore.currentPage.dash,
        itemsPerPage: SystemeActivityStore.itemsPerPage,
        selected: {
            selectall: false
        }
    }

    $rootScope.$on('SystemeActivityStore', function (ev, data) {
        switch (data.type) {
            case 'add':
                $scope.SystemeActivityStore.addOneData(data.id, data.data, 'dash');
                break;
        }
    });

    var refresh = $interval(function () {
        var now = Math.floor(Date.now() / 1000);
        var seuil = now - 86400;
        for (var n in $scope.SystemeActivityStore.data['dash']) {
            var StData = $scope.SystemeActivityStore.data['dash'][n];
            if (StData.tmsEdit < seuil) {
                $scope.SystemeActivityStore.deleteOneData(StData.id, 'dash', true);
            }
        }
    }, 5000);


    //
    //      BackupStore
    //
    //Init du store
    $scope.AbtelBackupStateStore = AbtelBackupStateStore;
    $scope.pie = {};
    //traitement des données pour générer le chart

    var refreshSizes = function () {
        var data = $scope.AbtelBackupStateStore.data['dash'][0];
        if (!data) return false;
        var nfsSize = parseInt(data.NfsSize);
        var borgSize = parseInt(data.BorgSize);
        var nasSize = parseInt(data.NasSize);
        var restoreSize = parseInt(data.RestoreSize);
        var freeSize = data.FreeSize;
        var total = nfsSize + borgSize + nasSize + restoreSize + freeSize;
        $scope.diskChartData = [(nfsSize/total)*100, (borgSize/total)*100, (nasSize/total)*100, (restoreSize/total)*100, (freeSize/total)*100];
        if ($scope.diskChart) {
            //update valuies
            $scope.diskChart.updateSeries($scope.diskChartData);
            return true;
        }

        var options = {
            chart: {
                height: 295,
                type: 'radialBar'

            },
            plotOptions: {
                radialBar: {
                    offsetY: -10,
                    startAngle: 0,
                    endAngle: 270,
                    hollow: {
                        margin: 5,
                        size: '30%',
                        background: 'transparent',
                        image: undefined,
                    },
                    dataLabels: {
                        name: {
                            show: false,

                        },
                        value: {
                            show: false,
                        }
                    }
                }
            },
            colors: [colors._warning, colors._danger, colors._io,colors._primary,colors._success],
            series: $scope.diskChartData,
            labels: ['Clone', 'Backup', 'Nas', 'Restore', 'Disponible'],
            legend: {
                show: true,
                floating: true,
                fontSize: '10px',
                position: 'left',
                offsetX: 40,
                offsetY: 0,
                labels: {
                    useSeriesColors: true,
                },
                formatter: function(seriesName, opts) {
                    return seriesName + ":  " + humanReadable((opts.w.globals.series[opts.seriesIndex]*total)/100)
                },
                markers: {
                    size: 0
                },
                itemMargin: {
                    horizontal: 1,
                }
            },
            responsive: [{
                breakpoint: 480,
                options: {
                    legend: {
                        show: false
                    }
                }
            }]
        }

        $scope.diskChart = new ApexCharts(
            document.querySelector("#chart-disk"),
            options
        );

        $scope.diskChart.render();
        return true;
    }

    $rootScope.$on('AbtelBackupStateStore', function (ev, data) {
        if (data.type == 'add') {
            refreshSizes(true);
        }
    });


    //
    //      EsxVm
    //
    //Init du store
    $scope.AbtelBackupBorgRepoStore = AbtelBackupBorgRepoStore;
    $scope.AbtelBackupBorgRepoStore.setFilters('Size>0', 'dash');

    $scope.bar = {};
    var numberWithCommas = function (x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
    };
    var refreshSizesBar = function () {
        var data = $scope.AbtelBackupBorgRepoStore.data['dash'];
        if (!data.length) return false;

        var datasetBorg = [];
        var labelBorg = [];
        for (var n in data) {
            datasetBorg.push(parseInt(data[n].Size));
            labelBorg.push(data[n].Titre);
        }



        var options = {
            chart: {
                height: 290,
                type: 'bar',
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        position: 'top', // top, center, bottom
                    },
                }
            },
            dataLabels: {
                enabled: true,
                formatter: function (val) {
                    return humanReadable(val);
                },
                offsetY: -20,
                style: {
                    fontSize: '12px',
                    colors: ["#304758"]
                }
            },
            series: [{
                name: 'Repo',
                data: datasetBorg
            }],
            xaxis: {
                categories: labelBorg,
                position: 'top',
                labels: {
                    offsetY: -18,

                },
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false
                },
                crosshairs: {
                    fill: {
                        type: 'gradient',
                        gradient: {
                            colorFrom: '#D8E3F0',
                            colorTo: '#BED1E6',
                            stops: [0, 100],
                            opacityFrom: 0.4,
                            opacityTo: 0.5,
                        }
                    }
                }
            },
            fill: {
                gradient: {
                    shade: 'light',
                    type: "horizontal",
                    shadeIntensity: 0.25,
                    colorFrom: colors._primary,
                    colorTo: colors._secondary,
                    inverseColors: true,
                    opacityFrom: 1,
                    opacityTo: 1,
                    stops: [50, 0, 100, 100]
                },
            },
            yaxis: {
                axisBorder: {
                    show: false
                },
                axisTicks: {
                    show: false,
                },
                labels: {
                    show: false,
                    formatter: function (val) {
                        return humanReadable(val);
                    }
                }

            }
        }

        $scope.repoChart = new ApexCharts(
            document.querySelector("#chart-repo"),
            options
        );

        $scope.repoChart.render();


/*        $scope.bar.data = [datasetBorg];
        if ($scope.bar.labels) return true;

        $scope.bar.labels = [];
        for (var n in data) {
            $scope.bar.labels.push(data[n].Titre);
        }

        $scope.bar.dsOverride = [
            {
                label: 'Taille Backup',
                backgroundColor: colors._warning,
                hoverBackgroundColor: colors._warning,
                borderColor: colors._warning,
                stack: 1,
                xAxisID: 'Xaxis1'
            }
        ];

        $scope.bar.options = {
            legend: {display: true},
            maintainAspectRatio: false,
            tooltips: {
                callbacks: {
                    label: function (tooltipItems, data) { // Solution found on https://stackoverflow.com/a/34855201/6660135
                        //console.log(tooltipItems,data);
                        //Return value for label
                        return ' ' + data.datasets[tooltipItems.datasetIndex].label + ' : ' + humanReadable(data.datasets[tooltipItems.datasetIndex].data[tooltipItems.index]);
                    }
                }
            },
            scales: {
                xAxes: [{
                    stacked: false,
                    barThickness: 20,
                    categoryPercentage: 0.5,
                    id: 'Xaxis1'
                }, {
                    stacked: false,
                    barThickness: 40,
                    id: 'Xaxis2',
                    type: 'category',
                    categoryPercentage: 0.5,
                    barPercentage: 1,
                    gridLines: {
                        offsetGridLines: true
                    },
                    label: 'Go',
                    offset: true,
                    display: false
                }],
                yAxes: [{
                    stacked: false,
                    ticks: {
                        callback: function (value) {
                            return numberWithCommas(value);
                        },
                    },
                }]
            }
        };*/
        return true;
    }
    $scope.myCharts = {};
    $scope.$on('chart-create', function (event, chart) {
        //console.log(chart.chart.canvas.id);
        //console.log(chart.chart.config.type);
        //console.log(chart);
        //If id is the same, reference will be updated
        $scope.myCharts[chart.chart.canvas.id] = chart;
    });

    $rootScope.$on('AbtelBackupBorgRepoStore', function (ev, data) {
        if (data.type == 'edit' || data.type == 'add') {
            refreshSizesBar(true);
        }
    });

    //call data and init bar
    $scope.AbtelBackupBorgRepoStore.getData(1, 'dash').then(refreshSizesBar)


    //---------------------//
    //      BandWidth      //
    //---------------------//
    $scope.bandwidth = {
        RX:[],
        TX:[],
        Cpu:[],
        Ram:[],
        Io:[]
    }
    var refreshBandwidthBar = function () {
        var data = $scope.AbtelBackupStateStore.data['dash'];
        //if(!data.length) return false;

        for (var n = data.length-1; n--;n>=0) {
            $scope.bandwidth.RX.push([data[n].tmsCreate*1000,data[n].RX]);
            $scope.bandwidth.TX.push([data[n].tmsCreate*1000,data[n].TX]);
            $scope.bandwidth.Cpu.push([data[n].tmsCreate*1000,data[n]['CpuUsage']]);
            $scope.bandwidth.Ram.push([data[n].tmsCreate*1000,data[n]['RamUsage']]);
            $scope.bandwidth.Io.push([data[n].tmsCreate*1000,data[n]['IOUsage']]);
        }
        console.info('bandwidth init', $scope.bandwidth.RX,$scope.bandwidth.TX);

        $.getJSON('/Tools/Js/ApexChart/locales/fr.json', function(data) {
            var fr = data;
            var options = {
                chart: {
                    locales: [fr],
                    defaultLocale: 'fr',
                    height: 280,
                    type: "line",
                    stacked: true,
                    animations: {
                        enabled: true,
                        easing: "linear",
                        dynamicAnimation: {
                            speed: 2000
                        }
                    },
                    toolbar: {
                        show: false,
                        offsetY: -10
                    },
                    zoom: {
                        enabled: false
                    }
                },
                dataLabels: {
                    enabled: false
                },
                stroke: {
                    curve: "smooth",
                    width: 2
                },
                grid: {
                    padding: {
                        left: 0,
                        right: 0
                    }
                },
                markers: {
                    size: 0,
                    hover: {
                        size: 0
                    }
                },
                fill: {
                    opacity: [0.15,0.15,1],
                    gradient: {
                        inverseColors: false,
                        shade: 'light',
                        type: "vertical",
                        opacityFrom: 0.85,
                        opacityTo: 0.55,
                        stops: [0, 100, 100, 100]
                    }
                },
                series: [
                    {
                        name: "Download",
                        data: $scope.bandwidth.RX,
                        type: 'area',
                        color: colors._success
                    },
                    {
                        name: "Upload",
                        type: 'area',
                        data: $scope.bandwidth.TX,
                        color: colors._primary
                    },
                    {
                        name: "Cpu",
                        type: 'line',
                        data: $scope.bandwidth.Cpu,
                        color: colors._danger
                    },
                    {
                        name: "Ram",
                        type: 'line',
                        data: $scope.bandwidth.Ram,
                        color: colors._warning
                    },
                    {
                        name: "Io",
                        type: 'line',
                        data: $scope.bandwidth.Io,
                        color: colors._io
                    }
                ],
                xaxis: {
                    type: "datetime",
                    range: 120000,
                    labels: {
                        /**
                         * Allows users to apply a custom formatter function to xaxis labels.
                         *
                         * @param { String } value - The default value generated
                         * @param { Number } timestamp - In a datetime series, this is the raw timestamp
                         * @param { index } index of the tick / currently executing iteration in xaxis labels array
                         */
                        formatter: function(value, timestamp, index) {
                            return moment(new Date(timestamp)).format("HH:mm:ss")
                        }
                    }
                },
                yaxis: [
                    {
                        seriesName: 'Upload',
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#008FFB'
                        },
                        labels: {
                            style: {
                                color: '#008FFB',
                            }
                        },
                        title: {
                            text: "Bande passante kB/sec ",
                            style: {
                                color: '#008FFB',
                            }
                        },
                        tooltip: {
                            enabled: true
                        }
                    },
                    {
                        seriesName: 'Download',
                        show: false,
                        tooltip: {
                            enabled: true
                        }
                    },
                    {
                        seriesName: 'Cpu',
                        opposite: true,
                        min: 0,
                        max:100,
                        axisTicks: {
                            show: true,
                        },
                        axisBorder: {
                            show: true,
                            color: '#00E396'
                        },
                        labels: {
                            style: {
                                color: '#00E396',
                            }
                        },
                        title: {
                            text: "Pourcentage utilisation %",
                            style: {
                                color: '#00E396',
                            }
                        },
                    },
                    {
                        seriesName: 'Ram',
                        min: 0,
                        max:100,
                        show: false,
                        tooltip: {
                            enabled: true
                        }

                    },
                    {
                        seriesName: 'Io',
                        min: 0,
                        max:100,
                        show: false,
                        tooltip: {
                            enabled: true
                        }

                    }
                ]
                ,
                legend: {
                    show: true,
                    floating: true,
                    horizontalAlign: "center",
                    onItemClick: {
                        toggleDataSeries: false
                    },
                    position: "top",
                    offsetY: 0,
                    offsetX: 0
                }
            };
            $scope.bandwidthChart = new ApexCharts(
                document.querySelector("#chart-bandwidth"),
                options
            );
            $scope.bandwidthChart.render();


            /***
             * ETAT SYSTEME
             */
            var optionsSystem = {
                chart: {
                    height: 295,
                    type: 'radialBar'

                },
                plotOptions: {
                    radialBar: {
                        offsetY: -10,
                        startAngle: 0,
                        endAngle: 270,
                        hollow: {
                            margin: 5,
                            size: '30%',
                            background: 'transparent',
                            image: undefined,
                        },
                        dataLabels: {
                            name: {
                                show: false,

                            },
                            value: {
                                show: false,
                            }
                        }
                    }
                },
                colors: [colors._warning, colors._danger, colors._io],
                series: [76,67,61],
                labels: ['Cpu', 'Ram', 'Input/ Output'],
                legend: {
                    show: true,
                    floating: true,
                    fontSize: '10px',
                    position: 'left',
                    offsetX: 60,
                    offsetY: 10,
                    labels: {
                        useSeriesColors: true,
                    },
                    markers: {
                        size: 0
                    },
                    formatter: function(seriesName, opts) {
                        return seriesName + ":  " + opts.w.globals.series[opts.seriesIndex]+" %"
                    },
                    itemMargin: {
                        horizontal: 1,
                    }
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        legend: {
                            show: false
                        }
                    }
                }]
            }
            $scope.systemChart = new ApexCharts(
                document.querySelector("#chart-system"),
                optionsSystem
            );
            $scope.systemChart.render();
        });

        return true;
    }
    var updateBandwidth = function () {
        var dots = $scope.AbtelBackupStateStore.data['dash'];
        var dot = dots[0];
        //Download
        $scope.bandwidth.RX.push([dot.tmsCreate*1000,dot['RX']]);
        //Upload
        $scope.bandwidth.TX.push([dot.tmsCreate*1000,dot['TX']]);
        //Cpu
        $scope.bandwidth.Cpu.push([dot.tmsCreate*1000,dot['CpuUsage']]);
        //Ram
        $scope.bandwidth.Ram.push([dot.tmsCreate*1000,dot['RamUsage']]);
        //Io
        $scope.bandwidth.Io.push([dot.tmsCreate*1000,dot['IOUsage']]);

        //Update charts
        $scope.bandwidthChart.updateSeries([
            {
                name: "Download",
                data: $scope.bandwidth.RX
            },
            {
                name: "Upload",
                data: $scope.bandwidth.TX
            },
            {
                name: "Cpu",
                data: $scope.bandwidth.Cpu
            },
            {
                name: "Ram",
                data: $scope.bandwidth.Ram
            },
            {
                name: "Io",
                data: $scope.bandwidth.Io
            }
        ],true);
        $scope.systemChart.updateSeries([
            dot['CpuUsage'],dot['RamUsage'],dot['IOUsage']
        ])
        console.log('>>> update bandwidth', $scope.bandwidth, dot, dots);
    }

    //init bar bandwidth
    $scope.AbtelBackupStateStore.getData(1, 'dash').then(refreshSizes).then(refreshBandwidthBar);


    $rootScope.$on('AbtelBackupStateStore', function (ev, data) {
        if (data.type == 'add') {
            updateBandwidth();
        }
    });


});